<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
说明：vmes_produce_plan_quality_detail:生产计划明细检验报工表 Mapper.xml
创建人：陈刚 自动创建
创建时间：2020-03-03
 -->
<mapper namespace="com.xy.vmes.deecoop.produce.dao.ProducePlanQualityDetailMapper">

    <!-- 批量删除 自动创建，禁止修改-->
    <delete id="deleteByIds" parameterType="java.lang.String">
        delete from vmes_produce_plan_quality_detail
        where id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
		#{item}
        </foreach>
    </delete>

    <!-- 自动创建，禁止修改-->
    <update id="updateToDisableByIds" parameterType="java.lang.String" >
        update vmes_produce_plan_quality_detail
        set isdisable = '0' ,udate = now()
        where id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
        #{item}
        </foreach>
    </update>

    <!-- ***************************************************以上为自动生成代码禁止修改，请在下面添加业务代码************************************************* -->
    <insert id="producePlanQualityDetail" >
        delete from vmes_column where model_code = 'producePlanQualityDetail' ;
        insert into vmes_column (
        id,model_code,title_key,title_name,serial_number,
        isdisable,ishide,isedit,ismust,cdate,
        cuser
        ) VALUES
            (replace(uuid(), '-', ''),'producePlanQualityDetail','id','id',0, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','planId','生产计划id',1, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','planDtlId','生产计划明细id',2, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','productId','货品id',3, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','unitId','单位id(单据单位)',4, '1','1','1','0',now(), 'admin'),

            (replace(uuid(), '-', ''),'producePlanQualityDetail','inDetailId','入库明细id',5, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','fineCount','(检验)合格数量',6, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','badCount','(检验)不合格数量',7, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','cuser','创建用户id',8, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','cdate','创建时间',9, '1','1','1','0',now(), 'admin'),

            (replace(uuid(), '-', ''),'producePlanQualityDetail','uuser','修改用户id',10, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','udate','修改时间',11, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','remark','备注',12, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','isdisable','是否启用(0:已禁用 1:启用)',13, '1','1','1','0',now(), 'admin'),

            (replace(uuid(), '-', ''),'producePlanQualityDetail','code','产品计划号',14, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','count','计划数量',15, '1','1','1','0',now(), 'admin'),

            (replace(uuid(), '-', ''),'producePlanQualityDetail','productCode','货品编码',16, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','productName','货品名称',17, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','productSpec','规格型号',18, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','productGenre','属性ID',19, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','productProperty','自定义属性',20, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'producePlanQualityDetail','unitName','计量单位',21, '1','0','1','0',now(), 'admin'),

    </insert>

    <!-- 列表(全部) 自动创建，禁止修改-->
    <select id="dataList" parameterType="com.yvan.PageData" resultType="com.xy.vmes.entity.ProducePlanQualityDetail">
        select
        id id,
        plan_id planId,
        plan_dtl_id planDtlId,
        product_id productId,
        unit_id unitId,

        in_detail_id inDetailId,
        fine_count fineCount,
        bad_count badCount,
        cuser cuser,
        cdate cdate,

        uuser uuser,
        udate udate,
        remark remark,
        isdisable isdisable
        from vmes_produce_plan_quality_detail
        <where>
            <!--isSelfExist 是否考虑自己在业务表中是否存在
                false: (false or is null) 无需考虑自己在业务表中是否存在
                true : 需要考虑自己在业务表中是否存在
            -->
            <if test='id != null and id != ""' >
                <choose>
                    <when test="'true' == isSelfExist">
                        <![CDATA[ and id <> #{id} ]]>
                    </when>
                    <otherwise>
                        and id = #{id}
                    </otherwise>
                </choose>
            </if>

            <if test="planDtlId != null and planDtlId != ''" >
                and plan_dtl_id = #{planDtlId}
            </if>
            <if test="planId != null and planId != ''" >
                and plan_id = #{planId}
            </if>

            <!--queryStr 自定义sql查询语句-->
            <if test='queryStr != null and queryStr != ""'>
                and ${queryStr}
            </if>
        </where>
        <if test='orderStr != null and orderStr != ""' >
            order by ${orderStr}
        </if>
    </select>

    <select id="getDataListPage" parameterType="com.yvan.PageData" resultType="java.util.Map">
        select
        qualityDtl.id id,
        qualityDtl.plan_id planId,
        qualityDtl.plan_dtl_id planDtlId,
        qualityDtl.product_id productId,
        qualityDtl.unit_id unitId,

        qualityDtl.in_detail_id inDetailId,
        round(ifnull(qualityDtl.fine_count, 0), 2) fineCount,
        round(ifnull(qualityDtl.bad_count, 0), 2) badCount,
        qualityDtl.cuser cuser,
        DATE_FORMAT(qualityDtl.cdate,'%Y-%m-%d') cdate,

        qualityDtl.uuser uuser,
        qualityDtl.udate udate,
        qualityDtl.remark remark,
        qualityDtl.isdisable isdisable,

        <!--生产计划明细-->
        planDtl.code code,
        round(ifnull(planDtl.count, 0), 2) count,

        <!--货品表-->
        product.code sysProductCode,
        product.source_code custProductCode,
        CASE
        WHEN product.source_code is null THEN product.code
        WHEN product.source_code is not null THEN product.source_code
        ELSE null
        END productCode,
        product.name productName,
        product.spec productSpec,
        product.genre productGenre,
        product.property productProperty,
        unitName.name unitName

        from vmes_produce_plan_quality_detail qualityDtl
            left join vmes_produce_plan_detail planDtl on qualityDtl.plan_dtl_id = planDtl.id
            left join vmes_product product on qualityDtl.product_id = product.id
            left join vmes_dictionary unitName on qualityDtl.unit_id = unitName.id
        <where>
            <if test="planId != null and planId != ''" >
                and qualityDtl.plan_id = #{planId}
            </if>

            <!--queryStr 自定义sql查询语句-->
            <if test='queryStr != null and queryStr != ""' >
                and ${queryStr}
            </if>
        </where>
        <if test='orderStr != null and orderStr != ""' >
            order by ${orderStr}
        </if>
    </select>

</mapper>