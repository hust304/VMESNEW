<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
说明：vmes_purchase_plan_detail:采购计划 Mapper.xml
创建人：刘威 自动创建
创建时间：2019-02-28
 -->
<mapper namespace="com.xy.vmes.deecoop.purchase.dao.PurchasePlanDetailMapper">

    <!--表名 自动创建，禁止修改-->
    <sql id="tableName">
	vmes_purchase_plan_detail
    </sql>

    <!-- 字段 自动创建，禁止修改-->
    <sql id="Field">
		parent_id parentId,<!-- 采购计划ID -->
		product_id productId,<!-- 产品ID -->
		reason reason,<!-- 采购原因(字典表-vmes_dictionary.id) -->
		count count,<!-- 采购数量 -->
		edate edate,<!-- 期望到货时间 -->
		state state,<!-- 状态(0:待提交 1:待审核 2:待执行 3:执行中 4:已完成 -1:已取消) -->
		cuser cuser,<!-- 创建用户id -->
		cdate cdate,<!-- 创建时间 -->
		uuser uuser,<!-- 修改用户id -->
		udate udate,<!-- 修改时间 -->
		remark remark,<!-- 备注 -->
		isdisable isdisable,<!-- 是否启用(0:已禁用 1:启用) -->
		id id <!-- id -->
    </sql>

    <!-- 字段值 自动创建，禁止修改-->
    <sql id="FieldValue">
		#{parentId},<!-- 采购计划ID -->
		#{productId},<!-- 产品ID -->
		#{reason},<!-- 采购原因(字典表-vmes_dictionary.id) -->
		#{count},<!-- 采购数量 -->
		#{edate},<!-- 期望到货时间 -->
		#{state},<!-- 状态(0:待提交 1:待审核 2:待执行 3:执行中 4:已完成 -1:已取消) -->
		#{cuser},<!-- 创建用户id -->
		#{cdate},<!-- 创建时间 -->
		#{uuser},<!-- 修改用户id -->
		#{udate},<!-- 修改时间 -->
		#{remark},<!-- 备注 -->
		#{isdisable},<!-- 是否启用(0:已禁用 1:启用) -->
		#{id} <!-- id -->
    </sql>


    <!-- 字段名称  '_hide' 表示前端列表隐藏 自动创建，禁止修改-->
    <sql id="Column">
        '采购计划ID'  parentId,
        '产品ID'  productId,
        '采购原因(字典表-vmes_dictionary.id)'  reason,
        '采购数量'  count,
        '期望到货时间'  edate,
        '状态(0:待提交 1:待审核 2:待执行 3:执行中 4:已完成 -1:已取消)'  state,
        '创建用户id'  cuser,
        '创建时间'  cdate,
        '修改用户id'  uuser,
        '修改时间'  udate,
        '备注'  remark,
        '是否启用(0:已禁用 1:启用)'  isdisable,
        'id' id_hide
    </sql>

    <!-- 自动创建，禁止修改 -->
    <select id="findColumnList"  resultType="java.util.LinkedHashMap">
        select
        <include refid="Column"></include>
        from dual
    </select>

    <!-- 自动创建，禁止修改 -->
    <select id="findDataList"  parameterType="com.yvan.PageData"  resultType="java.util.Map">
        select
        <include refid="Field"></include>
        from
        <include refid="tableName"></include>
        <where>
            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr!=''" >
                and ${queryStr}
            </if>
        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

    <!-- 列表 自动创建，禁止修改-->
    <select id="datalistPage" parameterType="com.yvan.PageData" resultType="com.xy.vmes.entity.PurchasePlanDetail">
        select
        <include refid="Field"></include>
        from
        <include refid="tableName"></include>
        <where>
            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr!=''" >
                and ${queryStr}
            </if>
        </where>
    </select>


    <!-- 批量删除 自动创建，禁止修改-->
    <delete id="deleteByIds" parameterType="java.lang.String">
        delete from
        <include refid="tableName"></include>
        where
        id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
		#{item}
        </foreach>
    </delete>


    <!-- 自动创建，禁止修改-->
    <update id="updateToDisableByIds" parameterType="java.lang.String" >
        update
        <include refid="tableName"></include>
        set isdisable = '0' ,udate = now()
        where
        id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
        #{item}
        </foreach>
    </update>

    <!-- 自动创建，禁止修改-->
    <update id="updateByDefined" parameterType="com.yvan.PageData" >
        update
        <include refid="tableName"></include>
        set  ${updateStr} ,udate = now()
        where
        ${queryStr}
    </update>

    <!-- ***************************************************以上为自动生成代码禁止修改，请在下面添加业务代码************************************************* -->
    <insert id="insertColumn" >
        delete from vmes_column where model_code = 'PurchasePlanDetail' ;
        insert into vmes_column (
        id,model_code,title_key,title_name,serial_number,
        isdisable,ishide,isedit,ismust,cdate,
        cuser
        ) VALUES
            (replace(uuid(), '-', ''),'PurchasePlanDetail','parentId','采购计划ID',1, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','productId','货品ID',2, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','productCode','货品编码',3, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','productName','货品名称',4, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','spec','规格/型号',5, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','genre','属性',6, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','genreId','属性ID',7, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','unit','计量单位',8, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','unitId','计量单位ID',9, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','count','采购数量',10, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','reason','采购原因',11, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','reasonId','采购原因ID',12, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','edate','期望到货时间',13, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','remark','备注',14, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','state','明细状态',15, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','cuser','创建用户id',16, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','cdate','创建时间',17, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','uuser','修改用户id',18, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','udate','修改时间',19, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','isdisable','是否启用',20, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','code','计划单号',21, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'PurchasePlanDetail','id','id',0, '1','0','1','0',now(), 'admin')
    </insert>


    <!-- 列表(全部) 自动创建，禁止修改-->
    <select id="dataList" parameterType="com.yvan.PageData" resultType="com.xy.vmes.entity.PurchasePlanDetail">
        select
        <include refid="Field"></include>
        from
        <include refid="tableName"></include>
        <where>
            <!--isSelfExist 是否考虑自己在业务表中是否存在
                false: (false or is null) 无需考虑自己在业务表中是否存在
                true : 需要考虑自己在业务表中是否存在
            -->
            <if test="id != null and id != ''" >
                <choose>
                    <when test="'true' == isSelfExist">
                        <![CDATA[ and id <> #{id} ]]>
                    </when>
                    <otherwise>
                        and id = #{id}
                    </otherwise>
                </choose>
            </if>


            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>
        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>




    <!-- 字段 自动创建，可以修改-->
    <sql id="Field1">
        detail.parent_id parentId,<!-- 采购计划ID -->
        detail.product_id productId,<!-- 产品ID -->
        reason.id reasonId,<!-- 采购原因(字典表-vmes_dictionary.id) -->
        reason.name reason,
        round(ifnull(detail.count, 0), 2) count,<!-- 采购数量 -->
        DATE_FORMAT(detail.edate,'%Y-%m-%d') edate,<!-- 期望到货时间 -->
        detail.state state,<!-- 状态(0:待提交 1:待审核 2:待执行 3:执行中 4:已完成 -1:已取消) -->
        detail.cuser cuser,<!-- 创建用户id -->
        detail.cdate cdate,<!-- 创建时间 -->
        detail.uuser uuser,<!-- 修改用户id -->
        detail.udate udate,<!-- 修改时间 -->
        detail.remark remark,<!-- 备注 -->
        detail.isdisable isdisable,<!-- 是否启用(0:已禁用 1:启用) -->

        plan.code code,

        <!--货品表-->
        product.code sysProductCode,
        product.source_code custProductCode,
        CASE
          WHEN product.source_code is null THEN product.code
          WHEN product.source_code is not null THEN product.source_code
        ELSE null
        END productCode,
        product.name productName,
        product.spec,
        genre.name genre,
        genre.id genreId,
        unit.name unit,
        unit.id unitId,
        detail.id id <!-- id -->
    </sql>

    <!-- 字段值 自动创建，可以修改-->
    <!--
    <sql id="Column1">
            '采购计划ID'  parentId,
            '产品ID'  productId,
            '采购原因(字典表-vmes_dictionary.id)'  reason,
            '采购数量'  count,
            '期望到货时间'  edate,
            '状态(0:待提交 1:待审核 2:待执行 3:执行中 4:已完成 -1:已取消)'  state,
            '创建用户id'  cuser,
            '创建时间'  cdate,
            '修改用户id'  uuser,
            '修改时间'  udate,
            '备注'  remark,
            '是否启用(0:已禁用 1:启用)'  isdisable,
            'id' id_hide
    </sql>
     -->

    <!-- 自动创建，可以修改 -->
    <!--
    <select id="getColumnList"  resultType="java.util.LinkedHashMap">
        select
        <include refid="Column1"></include>
        from dual
    </select>
    -->

    <!-- 自动创建，可以修改 -->
    <select id="getDataList"  parameterType="com.yvan.PageData"  resultType="java.util.Map">
        select
        <include refid="Field1"></include>
        from
        vmes_purchase_plan_detail detail
        left join vmes_purchase_plan  plan on plan.id = detail.parent_id
        left join vmes_product product on product.id = detail.product_id
        left join vmes_product_unit produnit on produnit.product_id = product.id and produnit.type = 1
        left join vmes_dictionary genre on product.genre = genre.id
        left join vmes_dictionary unit on produnit.unit = unit.id
        left join vmes_dictionary type on product.type = type.id
        left join vmes_dictionary reason on detail.reason = reason.id

        <where>
            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>
            <if test="currentCompanyId != null and currentCompanyId != ''">
                and plan.company_id LIKE CONCAT(CONCAT('%', #{currentCompanyId}),'%')
            </if>
            <if test="parentId != null and parentId != ''">
                and detail.parent_id =  #{parentId}
            </if>
            <if test="code != null and code != ''">
                and plan.code LIKE CONCAT(CONCAT('%', #{code}),'%')
            </if>
            <if test="productCode != null and productCode != ''">
                and product.code LIKE CONCAT(CONCAT('%', #{productCode}),'%')
            </if>
            <if test="productName != null and productName != ''">
                and product.name LIKE CONCAT(CONCAT('%', #{productName}),'%')
            </if>
            <if test="productSpec != null and productSpec != ''">
                and product.spec LIKE CONCAT(CONCAT('%', #{productSpec}),'%')
            </if>
            <if test="productGenreName != null and productGenreName != ''">
                and genre.name LIKE CONCAT(CONCAT('%', #{productGenreName}),'%')
            </if>
            <if test="productUnitName != null and productUnitName != ''">
                and unit.name LIKE CONCAT(CONCAT('%', #{productUnitName}),'%')
            </if>
            <if test="detailState != null and detailState != ''">
                and detail.state =  #{detailState}
            </if>
        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

    <!-- 自动创建，可以修改 -->
    <select id="getDataListPage"  parameterType="com.yvan.PageData"  resultType="java.util.Map">
        select
        <include refid="Field1"></include>
        from
        vmes_purchase_plan_detail detail
        left join vmes_purchase_plan  plan on plan.id = detail.parent_id
        left join vmes_product product on product.id = detail.product_id
        left join vmes_product_unit produnit on produnit.product_id = product.id and produnit.type = 1
        left join vmes_dictionary genre on product.genre = genre.id
        left join vmes_dictionary unit on produnit.unit = unit.id
        left join vmes_dictionary type on product.type = type.id
        left join vmes_dictionary reason on detail.reason = reason.id

        <where>
            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>
            <if test="currentCompanyId != null and currentCompanyId != ''">
                and plan.company_id LIKE CONCAT(CONCAT('%', #{currentCompanyId}),'%')
            </if>
            <if test="parentId != null and parentId != ''">
                and detail.parent_id =  #{parentId}
            </if>
            <if test="code != null and code != ''">
                and plan.code LIKE CONCAT(CONCAT('%', #{code}),'%')
            </if>
            <if test="productCode != null and productCode != ''">
                and product.code LIKE CONCAT(CONCAT('%', #{productCode}),'%')
            </if>
            <if test="productName != null and productName != ''">
                and product.name LIKE CONCAT(CONCAT('%', #{productName}),'%')
            </if>
            <if test="productSpec != null and productSpec != ''">
                and product.spec LIKE CONCAT(CONCAT('%', #{productSpec}),'%')
            </if>
            <if test="productGenreName != null and productGenreName != ''">
                and genre.name LIKE CONCAT(CONCAT('%', #{productGenreName}),'%')
            </if>
            <if test="productUnitName != null and productUnitName != ''">
                and unit.name LIKE CONCAT(CONCAT('%', #{productUnitName}),'%')
            </if>
            <if test="detailState != null and detailState != ''">
                and detail.state =  #{detailState}
            </if>
        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>




</mapper>