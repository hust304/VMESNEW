<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
说明：vmes_sale_order_detail:订单明细 Mapper.xml
创建人：陈刚 自动创建
创建时间：2018-12-05
 -->
<mapper namespace="com.xy.vmes.deecoop.sale.dao.SaleOrderDetailMapper">

    <!-- 批量删除 自动创建，禁止修改-->
    <delete id="deleteByIds" parameterType="java.lang.String">
        delete from vmes_sale_order_detail
        where id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
		#{item}
        </foreach>
    </delete>

    <!-- 自动创建，禁止修改-->
    <update id="updateToDisableByIds" parameterType="java.lang.String" >
        update vmes_sale_order_detail
        set isdisable = '0' ,udate = now()
        where id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
        #{item}
        </foreach>
    </update>

    <!-- ***************************************************以上为自动生成代码禁止修改，请在下面添加业务代码************************************************* -->
    <insert id="insertColumn" >
        delete from vmes_column where model_code = 'saleOrderDetail' ;
        insert into vmes_column (
        id,model_code,title_key,title_name,serial_number,
        isdisable,ishide,isedit,ismust,cdate,
        cuser
        ) VALUES
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'parentId', '订单id', 0, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'id', 'id', 0, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productId', '货品id', 1, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productCode', '货品编码', 2, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productName', '货品名称', 3, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productSpec', '规格型号', 4, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productGenre', '货品属性id', 5, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productGenreName', '货品属性', 5, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productUnit', '计量单位id', 6, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productUnitName', '计量单位', 6, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productType', '货品类型id', 7, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'priceUnit', '计价单位id', 8, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'priceUnitName', '单位', 8, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'count', '订购数量', 9, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productPrice', '单价', 10, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productSum', '金额', 11, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productCount', '货品数量(计量数量)', 12, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'stockCount', '库存数量', 13, '1', '1', '1', '0', '2018-12-6 09:16:39', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productStockCount', '库存可用数量', 14, '1', '1', '1', '0', '2018-12-6 09:16:39', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productLockCount', '库存锁定数量', 15, '1', '0', '1', '0', '2018-12-6 09:16:39', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'deliverDate', '交付日期', 16, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'fileUrl', '附件地址', 17, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'remark', '备注', 18, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'stateName', '状态', 19, '1', '0', '1', '0', '2018-12-6 09:25:40', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'state', '明细状态id', 19, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'cuser', '创建用户id', 20, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'cdate', '创建时间', 21, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'uuser', '修改用户id', 22, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'udate', '修改时间', 23, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'isdisable', '是否启用(0:已禁用 1:启用)', 24, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'isLockWarehouse', '是否锁定仓库(0:无锁定 1:锁定)', 25, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'lockCount', '锁定货品数量', 26, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'lockDate', '锁定开始时间', 27, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'isneedproduce', '是否需要生产(0:无需 1:需要 库存不够)', 28, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'outDetailId', '出库明细ID', 29, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'planDetailId', '生产计划明细ID', 30, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),

            (replace(uuid(), '-', ''), 'saleOrderDetail', 'stockCountByPrice', '库存数量', 13, '1', '1', '1', '0', '2018-12-6 09:16:39', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productStockCountByPrice', '库存可用数量', 14, '1', '1', '1', '0', '2018-12-6 09:16:39', 'admin'),

    </insert>

    <!-- 列表(全部) 自动创建，禁止修改-->
    <select id="dataList" parameterType="com.yvan.PageData" resultType="com.xy.vmes.entity.SaleOrderDetail">
        select
        id id,
        parent_id parentId,
        state state,
        file_url fileUrl,
        deliver_date deliverDate,

        count count,
        product_count productCount,
        product_id productId,
        product_price productPrice,
        product_sum productSum,

        product_unit productUnit,
        price_unit priceUnit,
        is_lock_warehouse isLockWarehouse,
        is_need_produce isNeedProduce,
        lock_count lockCount,

        lock_date lockDate,
        out_detail_id outDetailId,
        plan_detail_id planDetailId,
        cuser cuser,
        cdate cdate,

        uuser uuser,
        udate udate,
        remark remark,
        isdisable isdisable
        from vmes_sale_order_detail
        <where>
            <!--isSelfExist 是否考虑自己在业务表中是否存在
                false: (false or is null) 无需考虑自己在业务表中是否存在
                true : 需要考虑自己在业务表中是否存在
            -->
            <if test="id != null and id != ''" >
                <choose>
                    <when test="'true' == isSelfExist">
                        <![CDATA[ and id <> #{id} ]]>
                    </when>
                    <otherwise>
                        and id = #{id}
                    </otherwise>
                </choose>
            </if>
            <if test="parentId != null and parentId != ''" >
                and parent_id = #{parentId}
            </if>
            <if test="state != null and state != ''" >
                and state = #{state}
            </if>

            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>
        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

    <!-- 自动创建，可以修改 -->
    <select id="getDataListPage" parameterType="com.yvan.PageData" resultType="java.util.Map">
        select
            detail.id id,
            detail.parent_id parentId,
            detail.state state,
            CASE
                WHEN detail.state = '0' THEN '待提交'
                WHEN detail.state = '1' THEN '待审核'
                WHEN detail.state = '2' THEN '待出库'
                WHEN detail.state = '3' THEN '待发货'
                WHEN detail.state = '4' THEN '已发货'
                WHEN detail.state = '5' THEN '已完成'
                WHEN detail.state = '-1' THEN '已取消'
            ELSE null
            END stateName,

            detail.file_url fileUrl,
            DATE_FORMAT(detail.deliver_date,'%Y-%m-%d') deliverDate,

            round(ifnull(detail.count, 0),2) count,
            round(ifnull(detail.product_count, 0),2) productCount,
            detail.product_id productId,
            round(ifnull(detail.product_price, 0),2) productPrice,
            round(ifnull(detail.product_sum, 0),2) productSum,

            detail.product_unit productUnit,
            detail.price_unit priceUnit,
            detail.is_lock_warehouse isLockWarehouse,
            detail.is_need_produce isNeedProduce,
            detail.lock_count lockCount,

            detail.lock_date lockDate,
            detail.out_detail_id outDetailId,
            detail.plan_detail_id planDetailId,
            detail.cuser cuser,
            detail.cdate cdate,

            detail.uuser uuser,
            detail.udate udate,
            detail.remark remark,
            detail.isdisable isdisable,

            <!--货品表-->
            product.code productCode,
            product.name productName,
            product.spec productSpec,
            product.genre productGenre,

            product.type productType,
            round(ifnull(product.stock_count, 0), 2) stockCount,
            round(ifnull(product.lock_count, 0), 2) productLockCount,
            round((ifnull(product.stock_count, 0) - ifnull(product.lock_count, 0)), 2) productStockCount,
            productUnit.name productUnitName,

            priceUnit.name priceUnitName,
            genre.name productGenreName

        from vmes_sale_order_detail detail
            left join vmes_product product on detail.product_id = product.id
            left join vmes_dictionary productUnit on detail.product_unit = productUnit.id
            left join vmes_dictionary priceUnit on detail.price_unit = priceUnit.id
            left join vmes_dictionary genre on product.genre = genre.id

        <where>
            <if test="parentId != null and parentId != ''" >
                and detail.parent_id = #{parentId}
            </if>
            <if test="state != null and state != ''" >
                and detail.state = #{state}
            </if>

            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>

        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>




</mapper>