<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
说明：vmes_sale_order_detail:订单明细 Mapper.xml
创建人：陈刚 自动创建
创建时间：2018-12-05
 -->
<mapper namespace="com.xy.vmes.deecoop.sale.dao.SaleOrderDetailMapper">

    <!-- 批量删除 自动创建，禁止修改-->
    <delete id="deleteByIds" parameterType="java.lang.String">
        delete from vmes_sale_order_detail
        where id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
		#{item}
        </foreach>
    </delete>

    <!-- 自动创建，禁止修改-->
    <update id="updateToDisableByIds" parameterType="java.lang.String" >
        update vmes_sale_order_detail
        set isdisable = '0' ,udate = now()
        where id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
        #{item}
        </foreach>
    </update>

    <!-- ***************************************************以上为自动生成代码禁止修改，请在下面添加业务代码************************************************* -->
    <insert id="insertColumn" >
        delete from vmes_column where model_code = 'saleOrderDetail' ;
        insert into vmes_column (
        id,model_code,title_key,title_name,serial_number,
        isdisable,ishide,isedit,ismust,cdate,
        cuser
        ) VALUES
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'id', 'id', 0, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'maxExpectDate', '最大约定交期', 0, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'parentId', '订单id', 0, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productId', '货品id', 1, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productCode', '货品编码', 2, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productName', '货品名称', 3, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productSpec', '规格型号', 4, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productGenre', '货品属性id', 5, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productGenreName', '货品属性', 5, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productType', '货品类型id', 6, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'orderUnit', '单位id', 7, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'orderUnitName', '单位', 7, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'orderCount', '订购数量', 8, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productCount', '货品数量(计量数量)', 9, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productUnit', '计量单位id', 9, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productUnitName', '计量单位', 9, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'priceUnit', '计价单位id', 10, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'priceUnitName', '计价单位', 10, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'priceCount', '货品数量(计价数量)', 10, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productPrice', '单价', 11, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productSum', '金额', 12, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'stockCountByPrice', '库存数量', 14, '1', '1', '1', '0', '2018-12-6 09:16:39', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'stockCount', '库存数量', 14, '1', '0', '1', '0', '2018-12-6 09:16:39', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productStockCountByPrice', '库存可用数量', 15, '1', '1', '1', '0', '2018-12-6 09:16:39', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productStockCount', '库存可用数量', 15, '1', '0', '1', '0', '2018-12-6 09:16:39', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'productLockCount', '库存锁定数量', 16, '1', '0', '1', '0', '2018-12-6 09:16:39', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'deliverDate', '约定交期', 17, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'fileUrl', '附件地址', 18, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'remark', '备注', 19, '1', '1', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'stateName', '状态', 20, '1', '0', '1', '0', '2018-12-6 09:25:40', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'state', '明细状态id', 20, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'cuser', '创建用户id', 21, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'cdate', '创建时间', 22, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'uuser', '修改用户id', 23, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'udate', '修改时间', 24, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'isdisable', '是否启用(0:已禁用 1:启用)', 25, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'isLockWarehouse', '是否锁定仓库(0:无锁定 1:锁定)', 26, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'lockCount', '锁定货品数量', 27, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'lockDate', '锁定开始时间', 28, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'isneedproduce', '是否需要生产(0:无需 1:需要 库存不够)', 29, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'deliverDetailId', '发货明细ID', 30, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'planDetailId', '生产计划明细ID', 31, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'priceType', 'priceType', 32, '1', '0', '1', '0', '2018-12-6 09:16:39', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'customerId', 'customerId', 33, '1', '0', '1', '0', '2018-12-6 09:16:39', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'customerName', 'customerName', 34, '1', '0', '1', '0', '2018-12-6 09:16:39', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'p2nFormula', 'p2nFormula', 35, '1', '0', '1', '0', '2018-12-6 09:16:39', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'n2pFormula', 'n2pFormula', 36, '1', '0', '1', '0', '2018-12-6 09:16:39', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'versionLockCount', 'versionLockCount', 36, '1', '0', '1', '0', '2018-12-6 09:16:39', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'endDeliverCount', '已发货数量', 37, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'endRetreatCount', '已退货数量', 38, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'lockCountN2P', '锁定货品数量', 27, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),

            (replace(uuid(), '-', ''), 'saleOrderDetail', 'n2pIsScale', 'n2p:是否需要四舍五入', 39, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'n2pDecimalCount', 'n2p:保留小数位数', 40, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),

            (replace(uuid(), '-', ''), 'saleOrderDetail', 'p2nIsScale', 'p2n:是否需要四舍五入', 41, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
            (replace(uuid(), '-', ''), 'saleOrderDetail', 'p2nDecimalCount', 'p2n:保留小数位数', 42, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
    </insert>

    <update id="updateStateByDetail" parameterType="com.yvan.PageData" >
        update vmes_sale_order_detail set
        state = #{state},
        udate = now()
        <where>
            <if test="parentId != null and parentId != ''" >
                and parent_id = #{parentId}
            </if>
            <if test="parentIds != null and parentIds != ''" >
                and ${parentIds}
            </if>
        </where>
    </update>

    <!--锁定库存数量-并发(version)控制-->
    <update id="updateLockCount" parameterType="com.yvan.PageData">
        update vmes_sale_order_detail
        set
        lockCount = ${lockCount},
        need_deliver_count = ${needDeliverCount},
        version = version + 1
        <where>
            <if test="id != null and id != ''" >
                and id=#{id}
            </if>
            <if test="version != null and version != ''" >
                and version=${version}
            </if>
        </where>
    </update>


    <!-- 列表(全部) 自动创建，禁止修改-->
    <select id="dataList" parameterType="com.yvan.PageData" resultType="com.xy.vmes.entity.SaleOrderDetail">
        select
        id id,
        parent_id parentId,
        state state,
        file_url fileUrl,
        deliver_date deliverDate,

        order_count orderCount,
        order_unit orderUnit,
        product_count productCount,
        product_unit productUnit,
        price_count priceCount,

        price_unit priceUnit,
        product_id productId,
        product_price productPrice,
        product_sum productSum,
        is_lock_warehouse isLockWarehouse,

        is_need_produce isNeedProduce,
        lock_count lockCount,
        need_deliver_count needDeliverCount,
        lock_date lockDate,
        plan_detail_id planDetailId,

        cuser cuser,
        cdate cdate,
        uuser uuser,
        udate udate,
        remark remark,

        isdisable isdisable,
        version_lock_count versionLockCount

        from vmes_sale_order_detail
        <where>
            <!--isSelfExist 是否考虑自己在业务表中是否存在
                false: (false or is null) 无需考虑自己在业务表中是否存在
                true : 需要考虑自己在业务表中是否存在
            -->
            <if test="id != null and id != ''" >
                <choose>
                    <when test="'true' == isSelfExist">
                        <![CDATA[ and id <> #{id} ]]>
                    </when>
                    <otherwise>
                        and id = #{id}
                    </otherwise>
                </choose>
            </if>

            <if test="ids != null and ids != ''" >
                and id in (${ids})
            </if>
            <if test="parentId != null and parentId != ''" >
                and parent_id = #{parentId}
            </if>
            <if test="state != null and state != ''" >
                and state = #{state}
            </if>
            <if test="versionLockCount != null and versionLockCount != ''" >
                and version_lock_count = ${versionLockCount}
            </if>
            <if test="productId != null and productId != ''" >
                and product_id = #{productId}
            </if>

            <if test="companyId != null and companyId != ''" >
                and parent_id in (
                    select id
                    from vmes_sale_order
                    where company_id = #{companyId}
                )
            </if>

            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>
        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

    <!-- 自动创建，可以修改 -->
    <select id="getDataListPage" parameterType="com.yvan.PageData" resultType="java.util.Map">
        select
            detail.id id,
            detail.parent_id parentId,
            detail.state state,
            CASE
                WHEN detail.state = '0' THEN '待提交'
                WHEN detail.state = '1' THEN '待审核'
                WHEN detail.state = '2' THEN '待生产'
                WHEN detail.state = '3' THEN '待出库'
                WHEN detail.state = '4' THEN '待发货'
                WHEN detail.state = '5' THEN '已完成'
                WHEN detail.state = '-1' THEN '已取消'
            ELSE null
            END stateName,
            detail.file_url fileUrl,
            DATE_FORMAT(detail.deliver_date,'%Y-%m-%d') deliverDate,

            round(ifnull(detail.order_count, 0),2) orderCount,
            detail.order_unit orderUnit,
            ifnull(detail.product_count, 0) productCount,
            detail.product_unit productUnit,
            detail.price_count priceCount,

            detail.price_unit priceUnit,
            detail.product_id productId,
            round(ifnull(detail.product_price, 0),2) productPrice,
            round(ifnull(detail.product_sum, 0),2) productSum,
            detail.is_lock_warehouse isLockWarehouse,

            detail.is_need_produce isNeedProduce,
            detail.lock_count lockCount,

            detail.lock_date lockDate,
            detail.plan_detail_id planDetailId,

            detail.cuser cuser,
            DATE_FORMAT(detail.cdate,'%Y-%m-%d %T') cdate,
            detail.uuser uuser,
            DATE_FORMAT(detail.udate,'%Y-%m-%d %T') udate,
            detail.remark remark,

            detail.isdisable isdisable,
            detail.version_lock_count versionLockCount,

            saleOrder.price_type priceType,
            saleOrder.customer_id customerId,
            customer.name customerName,

            <!--货品表-->
            product.code sysProductCode,
            product.source_code custProductCode,
            CASE
              WHEN product.source_code is null THEN product.code
              WHEN product.source_code is not null THEN product.source_code
            ELSE null
            END productCode,
            product.name productName,
            product.spec productSpec,
            product.genre productGenre,

            product.type productType,
            ifnull(product.stock_count, 0) stockCount,
            '' stockCountByPrice,

            ifnull(product.lock_count, 0) productLockCount,
            round(ifnull(detail.need_deliver_count, 0), 2) needDeliverCount,

            ifnull(product.stock_count, 0) - ifnull(product.lock_count, 0) productStockCount,
            '' productStockCountByPrice,

            productUnit.name productUnitName,
            priceUnit.name priceUnitName,
            orderUnit.name orderUnitName,
            genre.name productGenreName,

            round(ifnull(deliverDtl.count, 0), 2) endDeliverCount,

            round(ifnull(retreatDtl.count, 0), 2) endRetreatCount,

            <!--货品计量单位-->
            prodUnitPrice.np_formula n2pFormula,
            prodUnitPrice.pn_formula p2nFormula,

            prodUnitPrice.n2p_is_scale n2pIsScale,
            prodUnitPrice.n2p_decimal_count n2pDecimalCount,

            prodUnitPrice.p2n_is_scale p2nIsScale,
            prodUnitPrice.p2n_decimal_count p2nDecimalCount

        from vmes_sale_order_detail detail
            left join vmes_sale_order saleOrder on detail.parent_id = saleOrder.id
            left join vmes_customer customer on saleOrder.customer_id = customer.id
            left join vmes_product product on detail.product_id = product.id
            left join vmes_dictionary productUnit on detail.product_unit = productUnit.id
            left join vmes_dictionary priceUnit on detail.price_unit = priceUnit.id
            left join vmes_dictionary orderUnit on detail.order_unit = orderUnit.id
            left join vmes_dictionary genre on product.genre = genre.id
            left join vmes_product_unit prodUnitPrice on (detail.product_id = prodUnitPrice.product_id and detail.order_unit = prodUnitPrice.unit)

            left join (
            select order_detai_id, sum(order_count) count
            from vmes_sale_deliver_detail
            where state = '1'
            group by order_detai_id
            ) deliverDtl on detail.id = deliverDtl.order_detai_id

            left join (
            select order_detail_id, sum(order_count) count
            from vmes_sale_retreat_detail
            where state = '3'
            group by order_detail_id
            ) retreatDtl on detail.id = retreatDtl.order_detail_id

        <where>
            <if test="ids != null and ids != ''" >
                and detail.id in (${ids})
            </if>
            <if test="parentId != null and parentId != ''" >
                and detail.parent_id = #{parentId}
            </if>
            <if test="state != null and state != ''" >
                and detail.state = #{state}
            </if>

            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>

        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>




</mapper>