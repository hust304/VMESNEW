<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
说明：vmes_sale_order_detail:订单明细 Mapper.xml
创建人：陈刚 自动创建
创建时间：2018-12-05
 -->
<mapper namespace="com.xy.vmes.deecoop.sale.dao.SaleOrderDetailMapper">

    <!-- 批量删除 自动创建，禁止修改-->
    <delete id="deleteByIds" parameterType="java.lang.String">
        delete from vmes_sale_order_detail
        where id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
		#{item}
        </foreach>
    </delete>

    <!-- 自动创建，禁止修改-->
    <update id="updateToDisableByIds" parameterType="java.lang.String" >
        update vmes_sale_order_detail
        set isdisable = '0' ,udate = now()
        where id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
        #{item}
        </foreach>
    </update>

    <!-- ***************************************************以上为自动生成代码禁止修改，请在下面添加业务代码************************************************* -->
    <insert id="insertColumn" >
        delete from vmes_column where model_code = 'saleOrderDetail' ;
        insert into vmes_column (
        id,model_code,title_key,title_name,serial_number,
        isdisable,ishide,isedit,ismust,cdate,
        cuser
        ) VALUES
            (replace(uuid(), '-', ''),'saleOrderDetail','parentId','订单ID',1, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','state','订单状态(0:待提交 1:待审核 2:待出库 3:待发货 4:已发货 5:已完成 -1:已取消)',2, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','fileUrl','附件地址',3, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','deliverDate','交付日期',4, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','count','订购数量(计价数量)',5, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','productCount','货品数量(计量数量)',6, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','productId','货品ID',7, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','productPrice','货品单价(货品计价单位匹配获得)',8, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','productSum','货品金额(订购数量 * 货品单价)',9, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','productUnit','计量单位id',10, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','priceUnit','计价单位id',11, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','isLockWarehouse','是否锁定仓库(0:无锁定 1:锁定)',12, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','isneedproduce','是否需要生产(0:无需 1:需要 库存不够)',13, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','lockCount','锁定货品数量',14, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','lockDate','锁定开始时间',15, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','outDetailId','出库明细ID',16, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','planDetailId','生产计划明细ID',17, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','cuser','创建用户id',18, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','cdate','创建时间',19, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','uuser','修改用户id',20, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','udate','修改时间',21, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','remark','备注',22, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','isdisable','是否启用(0:已禁用 1:启用)',23, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','id','id',0, '1','1','1','0',now(), 'admin'),

            (replace(uuid(), '-', ''),'saleOrderDetail','productCode','productCode',0, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','productName','productName',0, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','productSpec','productSpec',0, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','productUnit','productUnit',0, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','productGenre','productGenre',0, '1','1','1','0',now(), 'admin'),

            (replace(uuid(), '-', ''),'saleOrderDetail','productType','productType',0, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','productUnitName','productUnitName',0, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','priceUnitName','priceUnitName',0, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','productGenreName','productGenreName',0, '1','1','1','0',now(), 'admin')

            (replace(uuid(), '-', ''),'saleOrderDetail','stockCount','stockCount',0, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','productLockCount','productLockCount',0, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','productStockCount','productStockCount',0, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'saleOrderDetail','stateName','stateName',0, '1','1','1','0',now(), 'admin')
    </insert>

    <!-- 列表(全部) 自动创建，禁止修改-->
    <select id="dataList" parameterType="com.yvan.PageData" resultType="com.xy.vmes.entity.SaleOrderDetail">
        select
        id id,
        parent_id parentId,
        state state,
        file_url fileUrl,
        deliver_date deliverDate,

        count count,
        product_count productCount,
        product_id productId,
        product_price productPrice,
        product_sum productSum,

        product_unit productUnit,
        price_unit priceUnit,
        is_lock_warehouse isLockWarehouse,
        is_need_produce isNeedProduce,
        lock_count lockCount,

        lock_date lockDate,
        out_detail_id outDetailId,
        plan_detail_id planDetailId,
        cuser cuser,
        cdate cdate,

        uuser uuser,
        udate udate,
        remark remark,
        isdisable isdisable
        from vmes_sale_order_detail
        <where>
            <!--isSelfExist 是否考虑自己在业务表中是否存在
                false: (false or is null) 无需考虑自己在业务表中是否存在
                true : 需要考虑自己在业务表中是否存在
            -->
            <if test="id != null and id != ''" >
                <choose>
                    <when test="'true' == isSelfExist">
                        <![CDATA[ and id <> #{id} ]]>
                    </when>
                    <otherwise>
                        and id = #{id}
                    </otherwise>
                </choose>
            </if>
            <if test="parentId != null and parentId != ''" >
                and parent_id = #{parentId}
            </if>
            <if test="state != null and state != ''" >
                and state = #{state}
            </if>

            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>
        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

    <!-- 自动创建，可以修改 -->
    <select id="getDataListPage" parameterType="com.yvan.PageData" resultType="java.util.Map">
        select
            detail.id id,
            detail.parent_id parentId,
            detail.state state,
            CASE
                WHEN detail.state = '0' THEN '待提交'
                WHEN detail.state = '1' THEN '待审核'
                WHEN detail.state = '2' THEN '待出库'
                WHEN detail.state = '3' THEN '待发货'
                WHEN detail.state = '4' THEN '已发货'
                WHEN detail.state = '5' THEN '已完成'
                WHEN detail.state = '-1' THEN '已取消'
            ELSE null
            END stateName,

            detail.file_url fileUrl,
            DATE_FORMAT(detail.deliver_date,'%Y-%m-%d') deliverDate,

            round(ifnull(detail.count, 0),2) count,
            round(ifnull(detail.product_count, 0),2) productCount,
            detail.product_id productId,
            round(ifnull(detail.product_price, 0),2) productPrice,
            round(ifnull(detail.product_sum, 0),2) productSum,

            detail.product_unit productUnit,
            detail.price_unit priceUnit,
            detail.is_lock_warehouse isLockWarehouse,
            detail.is_need_produce isNeedProduce,
            detail.lock_count lockCount,

            detail.lock_date lockDate,
            detail.out_detail_id outDetailId,
            detail.plan_detail_id planDetailId,
            detail.cuser cuser,
            detail.cdate cdate,

            detail.uuser uuser,
            detail.udate udate,
            detail.remark remark,
            detail.isdisable isdisable,

            <!--货品表-->
            product.code productCode,
            product.name productName,
            product.spec productSpec,
            product.genre productGenre,

            product.type productType,
            round(ifnull(product.stock_count, 0), 2) stockCount,
            round(ifnull(product.lock_count, 0), 2) productLockCount,
            round((ifnull(product.stock_count, 0) - ifnull(product.lock_count, 0)), 2) productStockCount,
            productUnit.name productUnitName,

            priceUnit.name priceUnitName,
            genre.name productGenreName

        from vmes_sale_order_detail detail
            left join vmes_product product on detail.product_id = product.id
            left join vmes_dictionary productUnit on detail.product_unit = productUnit.id
            left join vmes_dictionary priceUnit on detail.price_unit = priceUnit.id
            left join vmes_dictionary genre on product.genre = genre.id

        <where>
            <if test="parentId != null and parentId != ''" >
                and detail.parent_id = #{parentId}
            </if>
            <if test="state != null and state != ''" >
                and detail.state = #{state}
            </if>

            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>

        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>




</mapper>