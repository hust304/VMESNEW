<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
说明：vmes_warehouse_initial:仓库初始化设定 Mapper.xml
创建人：陈刚 自动创建
创建时间：2018-11-20
 -->
<mapper namespace="com.xy.vmes.deecoop.warehouse.dao.WarehouseInitialMapper">

    <!-- 批量删除 自动创建，禁止修改-->
    <delete id="deleteByIds" parameterType="java.lang.String">
        delete from vmes_warehouse_initial
        where id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>


    <!-- 自动创建，禁止修改-->
    <update id="updateToDisableByIds" parameterType="java.lang.String" >
        update vmes_warehouse_initial
        set isdisable = '0' ,udate = now()
        where id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>

    <!-- ***************************************************以上为自动生成代码禁止修改，请在下面添加业务代码************************************************* -->
    <update id="updateIsdisable" parameterType="com.yvan.PageData" >
        update vmes_warehouse_initial set
            isdisable = #{isdisable},
            udate = now()
        <where>
            <if test="companyId != null and companyId != ''" >
                and company_id = #{companyId}
            </if>
        </where>
    </update>

    <insert id="insertColumn" >
        delete from vmes_column where model_code = 'warehouseInitial' ;
        insert into vmes_column (
        id,model_code,title_key,title_name,serial_number,
        isdisable,ishide,isedit,ismust,cdate,
        cuser
        ) VALUES
            (replace(uuid(), '-', ''),'warehouseInitial','id','id',0, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','qrcode','qrcode',0, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','companyId','companyId',0, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','warehouseId','仓库货位ID',1, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','productId','产品ID',2, '1','1','1','0',now(), 'admin'),

            (replace(uuid(), '-', ''),'warehouseInitial','code','货位批次号',3, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','stockCount','库存数量',4, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','cuser','创建用户id',5, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','cdate','创建时间',6, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','uuser','修改用户id',7, '1','1','1','0',now(), 'admin'),

            (replace(uuid(), '-', ''),'warehouseInitial','auditDate','审核时间',8, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','udate','修改时间',8, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','remark','备注',9, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','isdisable','是否启用(0:已禁用 1:启用)',10, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','version','版本号(库存数量修改时)',11, '1','1','1','0',now(), 'admin'),

            (replace(uuid(), '-', ''),'warehouseInitial','warehouseCode','warehouseCode',8, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','pathName','pathName',8, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','productCode','productCode',9, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','productName','productName',10, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','productSpec','productSpec',11, '1','1','1','0',now(), 'admin'),

            (replace(uuid(), '-', ''),'warehouseInitial','productUnit','productUnit',9, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','productGenre','productGenre',10, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','productType','productType',11, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','productUnitName','productUnitName',10, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','productGenreName','productGenreName',11, '1','1','1','0',now(), 'admin'),

            (replace(uuid(), '-', ''),'warehouseInitial','checkStockCount','台账数量',13, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','checkCount','盘点数量',14, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouseInitial','moveCount','移库数量',15, '1','1','1','0',now(), 'admin')

            (replace(uuid(), '-', ''),'warehouseInitial','productSafetyCount','安全库存数量',16, '1','1','1','0',now(), 'admin')

</insert>


    <!-- 列表(全部) 自动创建，禁止修改-->
    <select id="dataList" parameterType="com.yvan.PageData" resultType="com.xy.vmes.entity.WarehouseInitial">
        select
            id id,
            company_id companyId,
            remark remark,
            cuser cuser,
            cdate cdate,
            uuser uuser,
            udate udate,
            isdisable isdisable,
            is_disable_button isDisableButton,
            warehouse_attribute warehouseAttribute
        from vmes_warehouse_initial
        <choose>
            <!--
                mapSize (0 or is null) 无查询参数-业务层传入
                isQueryAll 是否查询全部
                fasle: (false or is null) 无查询条件-查询结果集返回空或list.size()==0
                true : 无查询条件-返回全部业务表数据
            -->
            <when test="(mapSize == null || mapSize == 0) and 'true' != isQueryAll ">
                where 1=2
            </when>
            <otherwise>
                <where>
                    <!--isSelfExist 是否考虑自己在业务表中是否存在
                        false: (false or is null) 无需考虑自己在业务表中是否存在
                        true : 需要考虑自己在业务表中是否存在
                    -->
                    <if test="id != null and id != ''" >
                        <choose>
                            <when test="'true' == isSelfExist">
                                <![CDATA[ and id <> #{id} ]]>
                            </when>
                            <otherwise>
                                and id = #{id}
                            </otherwise>
                        </choose>
                    </if>

                    <if test="companyId != null and companyId != ''" >
                        and company_id = #{companyId}
                    </if>
                    <if test="warehouseAttribute != null and warehouseAttribute != ''" >
                        and warehouse_attribute = #{warehouseAttribute}
                    </if>

                    <!--queryStr 自定义sql查询语句-->
                    <if test="queryStr != null and queryStr != ''" >
                        and ${queryStr}
                    </if>
                </where>
            </otherwise>
        </choose>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

    <!-- 自动创建，可以修改 -->
    <select id="getDataListPage" parameterType="com.yvan.PageData" resultType="java.util.Map">
        select
            wp.id id,
            wp.qrcode qrcode,
            wp.company_id companyId,
            wp.warehouse_id warehouseId,
            wp.product_id productId,

            wp.code code,
            round(ifnull(wp.stock_count, 0), 2) stockCount,
            wp.cuser cuser,
            wp.cdate cdate,
            wp.uuser uuser,

            wp.audit_date auditDate,
            wp.udate udate,
            wp.remark remark,
            wp.isdisable isdisable,
            wp.version version,

            <!--vmes_warehouse:仓库货位表-->
            warehouse.path_id pathId,
            warehouse.path_name pathName,
            warehouse.code warehouseCode,

            <!--货品表-->
            product.code productCode,
            product.name productName,
            product.spec productSpec,
            produnit.unit productUnit,
            product.genre productGenre,
            product.type productType,
            unit.name productUnitName,
            genre.name productGenreName,
            round(ifnull(product.safety_count, 0), 2) productSafetyCount,

            round(ifnull(wp.stock_count, 0), 2) checkStockCount,
            '' checkCount,
            '' moveCount

        from vmes_warehouse_product wp
            left join vmes_warehouse warehouse on wp.warehouse_id = warehouse.id and warehouse.isdisable = '1'
            left join vmes_product product on wp.product_id = product.id and product.isdisable = '1'
            left join vmes_product_unit produnit on produnit.product_id = product.id and produnit.type = 1
            left join vmes_dictionary unit on produnit.unit = unit.id
            left join vmes_dictionary genre on product.genre = genre.id
        <where>
            <if test="productIds != null and productIds != ''" >
                and wp.product_id in (${productIds})
            </if>
            <if test="currentCompanyId != null and currentCompanyId != ''" >
                and wp.company_id=#{currentCompanyId}
            </if>

            <if test="warehouseIds != null and warehouseIds != ''" >
                and wp.warehouse_id in (${warehouseIds})
            </if>
            <if test="notInWarehouseIds != null and notInWarehouseIds != ''" >
                and wp.warehouse_id not in (${notInWarehouseIds})
            </if>

            <!--nodeId 树形结构指定节点id 自定义sql查询语句-->
            <if test="nodeId != null and nodeId != ''" >
                and warehouse.path_id LIKE CONCAT(CONCAT('%', #{nodeId}),'%')
            </if>

            <!--按货位属性 查询语句-->
            <if test="warehouseCode != null and warehouseCode != ''">
                and warehouse.code LIKE CONCAT(CONCAT(#{warehouseCode}),'%')
            </if>
            <if test="pathName != null and pathName != ''">
                and warehouse.path_name LIKE CONCAT('%', CONCAT(#{pathName}),'%')
            </if>

            <!--按货品属性 查询语句-->
            <if test="productCode != null and productCode != ''">
                and product.code LIKE CONCAT(CONCAT(#{productCode}),'%')
            </if>
            <if test="productName != null and productName != ''">
                and product.name LIKE CONCAT(CONCAT('%', #{productName}),'%')
            </if>
            <if test="productSpec != null and productSpec != ''">
                and product.spec LIKE CONCAT(CONCAT(#{productSpec}),'%')
            </if>
            <if test="productGenreName != null and productGenreName != ''">
                and genre.name LIKE CONCAT(CONCAT(#{productGenreName}),'%')
            </if>
            <if test="productUnitName != null and productUnitName != ''">
                and unit.name LIKE CONCAT(CONCAT(#{productUnitName}),'%')
            </if>

            <!--过滤出 (备件库)-->
            <if test="'true' == isNeedWarehouseSpare">
                and warehouse.name = '备件库'
            </if>
            <!--过滤出(非备件库) 自定义sql查询语句-->
            <if test="'true' == isNeedNotInWarehouseSpare">
                <![CDATA[ and warehouse.name <> '备件库' ]]>
            </if>

            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>

        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

    <!-- warehouseEdition(仓库版本): warehouseBySimple(简版仓库)-对应实体库(简版仓库)********************************************* -->
    <insert id="warehouseInitialBySimple" >
        delete from vmes_column where model_code = 'warehouseInitialBySimple' ;
        insert into vmes_column (
        id,model_code,title_key,title_name,serial_number,
        isdisable,ishide,isedit,ismust,cdate,
        cuser
        ) VALUES
        (replace(uuid(), '-', ''),'warehouseInitialBySimple','companyId','companyId',0, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseInitialBySimple','warehouseId','仓库货位ID',1, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseInitialBySimple','productId','货品id',2, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseInitialBySimple','stockCount','库存数量',4, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseInitialBySimple','warehouseCode','货位编码',8, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseInitialBySimple','pathName','货位名称',8, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseInitialBySimple','productCode','货品编码',9, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseInitialBySimple','productName','货品名称',10, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseInitialBySimple','productSpec','规格型号',11, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseInitialBySimple','productUnit','计量单位id',9, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseInitialBySimple','productGenre','货品属性id',10, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseInitialBySimple','productType','货品类别id',11, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseInitialBySimple','productUnitName','计量单位',10, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseInitialBySimple','productGenreName','货品属性',11, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseInitialBySimple','productSafetyCount','安全库存数量',16, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseInitialBySimple','checkStockCount','台账数量',17, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseInitialBySimple','checkCount','盘点数量',18, '1','1','1','0',now(), 'admin')
    </insert>

    <!-- warehouseEdition(仓库版本): warehouseBySimple(简版仓库)-对应实体库(简版仓库)********************************************* -->
    <select id="findWarehouseProductBySimple" parameterType="com.yvan.PageData" resultType="java.util.Map">
        select
            warehouseProduct.company_id companyId,
            warehouseProduct.warehouse_id warehouseId,
            warehouseProduct.product_id productId,
            round(warehouseProduct.stock_count, 2) stockCount,

            <!--vmes_warehouse:仓库货位表-->
            warehouse.path_id pathId,
            warehouse.path_name pathName,
            warehouse.code warehouseCode,

            <!--货品表-->
            product.code productCode,
            product.name productName,
            product.spec productSpec,
            produnit.unit productUnit,
            product.genre productGenre,
            product.type productType,
            unit.name productUnitName,
            genre.name productGenreName,
            round(ifnull(product.safety_count, 0), 2) productSafetyCount,

            round(warehouseProduct.stock_count, 2) checkStockCount,
            '' checkCount
        from (
            select
                warehouse_id,
                product_id,
                company_id,
                sum(stock_count) stock_count
            from vmes_warehouse_product
            <where>
                <if test="productIds != null and productIds != ''" >
                    and product_id in (${productIds})
                </if>

                <if test="currentCompanyId != null and currentCompanyId != ''" >
                    and company_id = #{currentCompanyId}
                </if>
                and warehouse_id in (
                    select id
                    from vmes_warehouse
                    <where>
                        <if test="warehouseIds != null and warehouseIds != ''" >
                            and id in (${warehouseIds})
                        </if>
                        <if test="notInWarehouseIds != null and notInWarehouseIds != ''" >
                            and id not in (${notInWarehouseIds})
                        </if>

                        <if test="currentCompanyId != null and currentCompanyId != ''" >
                            and company_id = #{currentCompanyId}
                        </if>

                        <!--过滤出 (备件库)-->
                        <if test="'true' == isNeedWarehouseSpare">
                            and name = '备件库'
                        </if>
                        <!--过滤出(非备件库) 自定义sql查询语句-->
                        <if test="'true' == isNeedNotInWarehouseSpare">
                            <![CDATA[ and name <> '备件库' ]]>
                        </if>

                    </where>
                )
            </where>
            group by warehouse_id,product_id,company_id
        ) warehouseProduct
            left join vmes_warehouse warehouse on warehouseProduct.warehouse_id = warehouse.id and warehouse.isdisable = '1'
            left join vmes_product product on warehouseProduct.product_id = product.id and product.isdisable = '1'
            left join vmes_product_unit produnit on warehouseProduct.product_id = produnit.product_id and produnit.type = 1
            left join vmes_dictionary unit on produnit.unit = unit.id
            left join vmes_dictionary genre on product.genre = genre.id
        <where>
            <!--nodeId 树形结构指定节点id 自定义sql查询语句-->
            <if test="nodeId != null and nodeId != ''" >
                and warehouse.path_id LIKE CONCAT(CONCAT('%', #{nodeId}),'%')
            </if>

            <!--按货位属性 查询语句-->
            <if test="warehouseCode != null and warehouseCode != ''">
                and warehouse.code LIKE CONCAT(CONCAT(#{warehouseCode}),'%')
            </if>
            <if test="pathName != null and pathName != ''">
                and warehouse.path_name LIKE CONCAT('%', CONCAT(#{pathName}),'%')
            </if>


            <!--按货品属性 查询语句-->
            <if test="productCode != null and productCode != ''">
                and product.code LIKE CONCAT(CONCAT(#{productCode}),'%')
            </if>
            <if test="productName != null and productName != ''">
                and product.name LIKE CONCAT(CONCAT('%', #{productName}),'%')
            </if>
            <if test="productSpec != null and productSpec != ''">
                and product.spec LIKE CONCAT(CONCAT(#{productSpec}),'%')
            </if>
            <if test="productGenreName != null and productGenreName != ''">
                and genre.name LIKE CONCAT(CONCAT(#{productGenreName}),'%')
            </if>
            <if test="productUnitName != null and productUnitName != ''">
                and unit.name LIKE CONCAT(CONCAT(#{productUnitName}),'%')
            </if>

            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>

        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>



</mapper>