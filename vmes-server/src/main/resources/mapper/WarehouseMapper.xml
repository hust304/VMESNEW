<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
说明：vmes_warehouse:仓库货位表 Mapper.xml
创建人：陈刚 自动创建
创建时间：2018-10-10
 -->
<mapper namespace="com.xy.vmes.deecoop.warehouse.dao.WarehouseMapper">

    <!-- 字段 自动创建，禁止修改-->
    <sql id="Field">
        id id,
        pid pid,
        company_id companyId,
        entity_type entityType,
        virtual_genre virtualGenre,

        virtual_dept_id virtualDeptId,
        virtual_dept_name virtualDeptName,
        virtual_customer_id virtualCustomerId,
        virtual_customer_name virtualCustomerName,
        layer layer,

        qrcode qrcode,
        code code,
        warehouse_id warehouseId,
        name name,
        name_en nameEn,

        serial_number serialNumber,
        isLeaf isLeaf,
        dept_id deptId,
        dept_place_key deptPlaceKey,
        path_name pathName,

        path_id pathId,
        isopen isopen,
        cuser cuser,
        cdate cdate,
        uuser uuser,

        udate udate,
        isdisable isdisable,
        remark remark,
        is_simple isSimple
    </sql>

    <!-- 批量删除 自动创建，禁止修改-->
    <delete id="deleteByIds" parameterType="java.lang.String">
        delete from vmes_warehouse
        where id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
		#{item}
        </foreach>
    </delete>


    <!-- 自动创建，禁止修改-->
    <update id="updateToDisableByIds" parameterType="java.lang.String" >
        update vmes_warehouse
            set isdisable = '0', udate = now()
        where id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
        #{item}
        </foreach>
    </update>

    <!-- ***************************************************以上为自动生成代码禁止修改，请在下面添加业务代码************************************************* -->
    <insert id="insertColumn" >
        delete from vmes_column where model_code = 'warehouse' ;
        insert into vmes_column (
        id,model_code,title_key,title_name,serial_number,
        isdisable,ishide,isedit,ismust,cdate,
        cuser
        ) VALUES
            (replace(uuid(), '-', ''),'warehouse','pid','上级id-根root',1, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','companyId','公司ID-组织架构',2, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','property','仓库属性(1:实体库 2:虚拟库)',3, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','entityType','实体库-仓库类型-(货品属性一致)-(字典表-vmes_dictionary.id)',4, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','virtualGenre','虚拟库-属性(1:内部单位 2:外部单位)',5, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','virtualDeptId','内部单位(部门ID)',6, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','virtualDeptName','内部单位名称',7, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','virtualCustomerId','外部单位ID(客户id)',8, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','virtualCustomerName','外部单位名称',9, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','layer','货位级别',10, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','qrcode','二维码-(图片相对路径)',11, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','code','货位编码',12, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','name','货位名称',13, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','nameEn','英文名称',14, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','deptId','货位所属部门ID',15, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','deptPlaceKey','部门货位ID-(字典表-vmes_dictionary.id)',16, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','pathName','根节点到本节点路径名称',17, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','pathId','根节点到本节点路径ID',18, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','isopen','是否公开 (0:不公开:企业内部维护 1:公开:超级管理员维护)',19, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','remark','备注',20, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','cuser','创建用户id',21, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','cdate','创建时间',22, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','uuser','修改用户id',23, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','udate','修改时间',24, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','isdisable','是否启用(0:已禁用 1:启用)',25, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'warehouse','id','id',0, '1','1','1','0',now(), 'admin')
    </insert>


    <!-- 列表(全部) 自动创建，禁止修改-->
    <select id="dataList" parameterType="com.yvan.PageData" resultType="com.xy.vmes.entity.Warehouse">
        select
            <include refid="Field"/>
        from
            vmes_warehouse
        <choose>
            <!--
                mapSize (0 or is null) 无查询参数-业务层传入
                isQueryAll 是否查询全部
                fasle: (false or is null) 无查询条件-查询结果集返回空或list.size()==0
                true : 无查询条件-返回全部业务表数据
            -->
            <when test="(mapSize == null || mapSize == 0) and 'true' != isQueryAll ">
                where 1=2
            </when>
            <otherwise>
                <where>
                    <!--isSelfExist 是否考虑自己在业务表中是否存在
                        false: (false or is null) 无需考虑自己在业务表中是否存在
                        true : 需要考虑自己在业务表中是否存在
                    -->
                    <if test="id != null and id != ''" >
                        <choose>
                            <when test="'true' == isSelfExist">
                                <![CDATA[ and id <> #{id} ]]>
                            </when>
                            <otherwise>
                                and id = #{id}
                            </otherwise>
                        </choose>
                    </if>
                    <if test="notInWarehouseIds != null and notInWarehouseIds != ''" >
                        and id not in (${notInWarehouseIds})
                    </if>

                    <if test="pid != null and pid != ''" >
                        and pid=#{pid}
                    </if>
                    <if test="companyId != null and companyId != ''" >
                        and company_id=#{companyId}
                    </if>
                    <if test="warehouseId != null and warehouseId != ''" >
                        and warehouse_id=#{warehouseId}
                    </if>
                    <if test="deptId != null and deptId != ''" >
                        and dept_id=#{deptId}
                    </if>
                    <if test="deptPlaceKey != null and deptPlaceKey != ''" >
                        and dept_place_key=#{deptPlaceKey}
                    </if>

                    <if test="code != null and code != ''" >
                        and code=#{code}
                    </if>
                    <if test="name != null and name != ''" >
                        and name=#{name}
                    </if>

                    <if test="isLeaf != null and isLeaf != ''" >
                        and isLeaf=#{isLeaf}
                    </if>
                    <if test="isdisable != null and isdisable != ''" >
                        and isdisable=#{isdisable}
                    </if>
                    <if test="property != null and property != ''" >
                        and property=#{property}
                    </if>
                    <if test="isWarehouse != null and isWarehouse != ''" >
                        and is_warehouse=#{isWarehouse}
                    </if>
                    <if test="layer != null and layer != ''" >
                        and layer=#{layer}
                    </if>
                    <if test="pathName != null and pathName != ''" >
                        and path_name=#{pathName}
                    </if>
                    <if test="'true' == isEntity" >
                        and entity_type is not null
                    </if>

                    <!--queryStr 自定义sql查询语句-->
                    <if test="queryStr != null and queryStr != ''" >
                        and ${queryStr}
                    </if>
                    <!--nodeId 树形结构指定节点id 自定义sql查询语句-->
                    <if test="nodeId != null and nodeId != ''" >
                        and path_id LIKE CONCAT(CONCAT('%', #{nodeId}),'%')
                    </if>
                    <if test="layerQueryStr != null and layerQueryStr != ''" >
                        or ${layerQueryStr}
                    </if>
                </where>
            </otherwise>
        </choose>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>


    <!-- 字段 自动创建，可以修改-->
    <sql id="Field1">

    </sql>

    <!-- 自动创建，可以修改 -->
    <select id="getDataListPage" parameterType="com.yvan.PageData" resultType="java.util.Map">
        select
            a.id id,
            a.pid pid,
            a.company_id companyId,
            a.entity_type entityType,
            a.virtual_genre virtualGenre,

            a.virtual_dept_id virtualDeptId,
            a.virtual_dept_name virtualDeptName,
            a.virtual_customer_id virtualCustomerId,
            a.virtual_customer_name virtualCustomerName,
            a.layer layer,

            a.qrcode qrcode,
            a.code code,
            a.warehouse_id warehouseId,
            a.name name,
            a.name_en nameEn,

            a.serial_number serialNumber,
            a.dept_id deptId,
            a.dept_place_key deptPlaceKey,
            a.path_name pathName,
            a.path_id pathId,
            a.isopen isopen,

            a.cuser cuser,
            a.cdate cdate,
            a.uuser uuser,
            a.udate udate,
            a.isdisable isdisable,

            a.remark remark,
            a.is_simple isSimple,

            <!--仓库属性-->
            c.name entityTypeName,
            CASE
              WHEN b.virtual_genre = '1' THEN b.virtual_dept_name
              WHEN b.virtual_genre = '2' THEN b.virtual_customer_name
            ELSE null
            END virtualDepartmentName

        from vmes_warehouse a
            left join vmes_warehouse b on a.warehouse_id = b.id
            left join vmes_dictionary c on b.entity_type = c.id
        <where>
            <if test="warehouseId != null and warehouseId != ''" >
                and a.id=#{warehouseId}
            </if>
            <if test="code != null and code != ''">
                and a.code LIKE CONCAT(CONCAT(#{code}),'%')
            </if>
            <if test="name != null and name != ''">
                and a.name LIKE CONCAT(CONCAT(#{name}),'%')
            </if>
            <if test="currentCompanyId != null and currentCompanyId != ''" >
                and a.company_id=#{currentCompanyId}
            </if>
            <if test="isdisable != null and isdisable != ''" >
                and a.isdisable=#{isdisable}
            </if>
            <if test="isLeaf != null and isLeaf != ''" >
                and a.isLeaf=#{isLeaf}
            </if>

            <if test="'true' == isNeedWarehouseProduct">
                and a.id in (
                    select warehouse_id
                    from vmes_warehouse_product
                    <where>
                        <if test="currentCompanyId != null and currentCompanyId != ''" >
                            and company_id = #{currentCompanyId}
                        </if>
                    </where>
                )
            </if>
            <!--nodeId 树形结构指定节点id 自定义sql查询语句-->
            <if test="nodeId != null and nodeId != ''" >
                and a.path_id LIKE CONCAT(CONCAT('%', #{nodeId}),'%')
            </if>
            <!--nodeId 实体库,虚拟库 自定义sql查询语句-->
            <if test="'true' == isNeedEntityVirtual">
                <!--实体库:2d75e49bcb9911e884ad00163e105f05 虚拟库:56f5e83dcb9911e884ad00163e105f05 仓库表:vmes_warehouse-->
                and (a.path_id LIKE '%2d75e49bcb9911e884ad00163e105f05%' or a.path_id LIKE '%56f5e83dcb9911e884ad00163e105f05%')
            </if>

        <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>
        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

    <!-- 获取全部仓库货位记录，同时带出该(货位,货品)库存数量 -->
    <select id="findListWarehouseByWarehouseProduct" parameterType="com.yvan.PageData" resultType="java.util.Map">
        select
            warehouse.id,
            warehouse.company_id companyId,
            warehouse.warehouse_id warehouseId,
            a.name warehouseName,
            warehouse.code,
            warehouse.path_name pathName,
            warehouse.path_id pathId,

            product.id productId,
            product.code productCode,
            product.name productName,
            ifnull(warehouseProduct.stock_count, 0) stockCount
        from vmes_warehouse warehouse
            left join vmes_warehouse a on warehouse.warehouse_id = a.id
        left join (
            select product_id,company_id,warehouse_id,round(sum(ifnull(stock_count,0)), 2) stock_count
            from vmes_warehouse_product
            <!--<where>-->
                <!--<if test="productId != null and productId != ''">-->
                    <!--and product_id = #{productId}-->
                <!--</if>-->
                <!--<if test="companyId != null and companyId != ''">-->
                    <!--and company_id = #{companyId}-->
                <!--</if>-->
                <!--<if test="warehouseId != null and warehouseId != ''">-->
                    <!--and warehouse_id = #{warehouseId}-->
                <!--</if>-->
            <!--</where>-->
            group by product_id,company_id,warehouse_id
        ) warehouseProduct on warehouse.id = warehouseProduct.warehouse_id
            left join vmes_product product on warehouseProduct.product_id = product.id
        <where>
            <if test="companyId != null and companyId != ''" >
                and warehouse.company_id=#{companyId}
            </if>
            <if test="isLeaf != null and isLeaf != ''" >
                and warehouse.isLeaf=#{isLeaf}
            </if>
            and warehouse.isdisable = '1'
            <!--nodeId 树形结构指定节点id 自定义sql查询语句-->
            <if test="nodeId != null and nodeId != ''" >
                and warehouse.path_id LIKE CONCAT(CONCAT('%', #{nodeId}),'%')
            </if>
            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>
        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

    <delete id="deleteWarehouseByPath" parameterType="java.lang.String">
        delete from vmes_warehouse
        <where>
            <if test="warehouseId != null and warehouseId != ''" >
                and path_id LIKE CONCAT(CONCAT('%', #{warehouseId}),'%')
            </if>
            <if test="companyId != null and companyId != ''" >
                and company_id=#{companyId}
            </if>
        </where>
    </delete>

</mapper>