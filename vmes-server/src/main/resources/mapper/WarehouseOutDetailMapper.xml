<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
说明：出库明细 Mapper.xml
创建人：刘威 自动创建
创建时间：2018-10-23
 -->
<mapper namespace="com.xy.vmes.deecoop.warehouse.dao.WarehouseOutDetailMapper">

    <!--表名 自动创建，禁止修改-->
    <sql id="tableName">
	vmes_warehouse_out_detail
    </sql>

    <!-- 字段 自动创建，禁止修改-->
    <sql id="Field">
        id id, <!-- id -->
        parent_id parentId,<!-- 入库单ID -->
        execute_id executeId,<!-- 执行人ID -->
        warehouse_id warehouseId,<!--  (推荐)货位ID -->
        product_id productId,<!-- 产品ID -->

        code code,<!-- 货位批次号 -->
        count count,<!-- 入库数量 -->
        state state,<!-- 状态(0:待派单 1:执行中 2:已完成) -->
        cuser cuser,<!-- 创建用户id -->
        cdate cdate,<!-- 创建时间 -->

        uuser uuser,<!-- 修改用户id -->
        udate udate,<!-- 修改时间 -->
        remark remark,<!-- 备注 -->
        isdisable isdisable,<!-- 是否启用(0:已禁用 1:启用) -->
        qrcode qrcode,

        business_id businessId,
        product_unit productUnit,
        product_count productCount,
        price_unit priceUnit,
        price_count priceCount,

        price price,
        product_price productPrice,
        warehouse_product_id warehouseProductId
    </sql>

    <!-- 字段值 自动创建，禁止修改-->
    <sql id="FieldValue">
        #{parentId},<!-- 入库单ID -->
        #{executeId},<!-- 执行人ID -->
        #{warehouseId},<!--  (推荐)货位ID -->
        #{productId},<!-- 产品ID -->
        #{code},<!-- 货位批次号 -->
        #{count},<!-- 入库数量 -->
        #{state},<!-- 状态(0:待派单 1:执行中 2:已完成) -->
        #{cuser},<!-- 创建用户id -->
        #{cdate},<!-- 创建时间 -->
        #{uuser},<!-- 修改用户id -->
        #{udate},<!-- 修改时间 -->
        #{remark},<!-- 备注 -->
        #{isdisable},<!-- 是否启用(0:已禁用 1:启用) -->
        #{qrcode},
        #{businessId},
        #{id} <!-- id -->
    </sql>


    <!-- 字段名称  '_hide' 表示前端列表隐藏 自动创建，禁止修改-->
    <sql id="Column">
        '入库单ID'  parentId,
        '执行人ID'  executeId,
        ' (推荐)货位ID'  warehouseId,
        '产品ID'  productId,
        '货位批次号'  code,
        '入库数量'  count,
        '状态(0:待派单 1:执行中 2:已完成)'  state,
        '创建用户id'  cuser,
        '创建时间'  cdate,
        '修改用户id'  uuser,
        '修改时间'  udate,
        '备注'  remark,
        '是否启用(0:已禁用 1:启用)'  isdisable,
        '二维码' qrcode,
        '业务id' businessId,
        'id' id_hide
    </sql>

    <!-- 自动创建，禁止修改 -->
    <select id="findColumnList"  resultType="java.util.LinkedHashMap">
        select
        <include refid="Column"></include>
        from dual
    </select>

    <!-- 自动创建，禁止修改 -->
    <select id="findDataList"  parameterType="com.yvan.PageData"  resultType="java.util.Map">
        select
        <include refid="Field"></include>
        from
        <include refid="tableName"></include>
        <where>
            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr!=''" >
                and ${queryStr}
            </if>
        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

    <!-- 列表 自动创建，禁止修改-->
    <select id="datalistPage" parameterType="com.yvan.PageData" resultType="com.xy.vmes.entity.WarehouseOutDetail">
        select
        <include refid="Field"></include>
        from
        <include refid="tableName"></include>
        <where>
            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr!=''" >
                and ${queryStr}
            </if>
        </where>
    </select>


    <!-- 批量删除 自动创建，禁止修改-->
    <delete id="deleteByIds" parameterType="java.lang.String">
        delete from
        <include refid="tableName"></include>
        where
        id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>


    <!-- 自动创建，禁止修改-->
    <update id="updateToDisableByIds" parameterType="java.lang.String" >
        update
        <include refid="tableName"></include>
        set isdisable = '0' ,udate = now()
        where
        id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>



    <!-- ***************************************************以上为自动生成代码禁止修改，请在下面添加业务代码************************************************* -->
    <insert id="insertColumn" >
        delete from vmes_column where model_code = 'WarehouseOutDetail' ;
        insert into vmes_column (
        id,model_code,title_key,title_name,serial_number,
        isdisable,ishide,isedit,ismust,cdate,
        cuser
        ) VALUES
        (replace(uuid(), '-', ''),'WarehouseOutDetail','productCode','货品编码',1, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','productName','货品名称',2, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','productSpec',' 规格/型号',3, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','productGenre','货品属性ID',4, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','productGenreName','货品属性',5, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','productUnit','计量单位ID',6, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','productUnitName','计量单位',7, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'WarehouseOutDetail','parentId','出库单ID',8, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','warehouseId',' (推荐)货位ID',10, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','productId','产品ID',11, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','code','批次号',12, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','count','出库数量',13, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','executeCount','已出库数量',14, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','state','状态',15, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','stateName','状态',15, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','cuser','创建用户id',16, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','cdate','创建时间',17, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','uuser','修改用户id',18, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','udate','修改时间',19, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','remark','备注',20, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','isdisable','是否启用',21, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','qrcode','二维码',22, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','businessId','业务id',23, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','id','id',0, '1','0','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''), 'WarehouseOutDetail', 'productCount', '计量单位数量', 24, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
        (replace(uuid(), '-', ''), 'WarehouseOutDetail', 'priceCount', '计价单位数量', 25, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
        (replace(uuid(), '-', ''), 'WarehouseOutDetail', 'priceUnit', '计价单位id', 26, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
        (replace(uuid(), '-', ''), 'WarehouseOutDetail', 'priceUnitName', '计价单位', 27, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),

        (replace(uuid(), '-', ''), 'WarehouseOutDetail', 'n2pFormula', 'n2p:公式', 28, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
        (replace(uuid(), '-', ''), 'WarehouseOutDetail', 'n2pIsScale', 'n2p:是否需要四舍五入', 29, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
        (replace(uuid(), '-', ''), 'WarehouseOutDetail', 'n2pDecimalCount', 'n2p:保留小数位数', 30, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),

        (replace(uuid(), '-', ''), 'WarehouseOutDetail', 'p2nFormula', 'p2n:公式', 31, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
        (replace(uuid(), '-', ''), 'WarehouseOutDetail', 'p2nIsScale', 'p2n:是否需要四舍五入', 32, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
        (replace(uuid(), '-', ''), 'WarehouseOutDetail', 'p2nDecimalCount', 'p2n:保留小数位数', 33, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),

        (replace(uuid(), '-', ''),'WarehouseOutDetail','warehouseName','仓库名称',35, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetail','price','单价',36, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''), 'WarehouseOutDetail', 'priceSum', '金额', 37, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),

        (replace(uuid(), '-', ''), 'WarehouseOutDetail', 'stockCount', '库存数量', 38, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
        (replace(uuid(), '-', ''), 'WarehouseOutDetail', 'stockCountByPrice', '库存数量', 39, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),

        (replace(uuid(), '-', ''), 'WarehouseOutDetail', 'productPrice', '单价(计量单位)', 40, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
        (replace(uuid(), '-', ''), 'WarehouseOutDetail', 'productPriceSum', '金额', 41, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),

        (replace(uuid(), '-', ''), 'WarehouseOutDetail', 'stockCount', '库存数量', 41, '1', '0', '1', '0', '2018-12-5 17:38:48', 'admin'),
    </insert>

    <insert id="insertColumn1" >
        delete from vmes_column where model_code = 'WarehouseOutDetailDispatch' ;
        insert into vmes_column (
        id,model_code,title_key,title_name,serial_number,
        isdisable,ishide,isedit,ismust,cdate,
        cuser
        ) VALUES
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','warehouseOutCode','出库单编码',1, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','productCode','货品编码',2, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','productName','货品名称',3, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','productSpec',' 规格/型号',4, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','productGenre','货品属性ID',5, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','productGenreName','货品属性',6, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','productUnit','计量单位ID',7, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','productUnitName','计量单位',8, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','parentId','出库单ID',9, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','warehouseId',' (推荐)货位ID',10, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','productId','产品ID',11, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','code','批次号',12, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','count','出库数量',13, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','executeCount','已出库数量',14, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','state','状态',15, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','stateName','状态',15, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','cuser','创建用户id',16, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','cdate','创建时间',17, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','uuser','修改用户id',18, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','udate','修改时间',19, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','remark','备注',20, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','isdisable','是否启用',21, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','qrcode','二维码',22, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','businessId','业务id',23, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','id','id',0, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailDispatch','parentWarehouseId','parentWarehouseId',0, '1','0','1','0',now(), 'admin')
    </insert>


    <insert id="insertColumn2" >
        delete from vmes_column where model_code = 'WarehouseOutDetailRecords' ;
        insert into vmes_column (
        id,model_code,title_key,title_name,serial_number,
        isdisable,ishide,isedit,ismust,cdate,
        cuser
        ) VALUES
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','warehouseOutCode','出库单编码',1, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','productCode','货品编码',2, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','productName','货品名称',3, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','productSpec',' 规格/型号',4, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','productGenre','货品属性ID',5, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','productGenreName','货品属性',6, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','productUnit','计量单位ID',7, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','productUnitName','计量单位',8, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','parentId','出库单ID',9, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','warehouseId',' (推荐)货位ID',10, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','productId','产品ID',11, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','code','批次号',12, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','count','出库数量',13, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','executeCount','已出库数量',14, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','state','状态',15, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','stateName','状态',15, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','cuser','创建用户id',16, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','cdate','创建时间',17, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','uuser','修改用户id',18, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','udate','修改时间',19, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','remark','备注',20, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','isdisable','是否启用',21, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','qrcode','二维码',22, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','businessId','业务id',23, '1','0','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'WarehouseOutDetailRecords','id','id',0, '1','0','1','0',now(), 'admin')
    </insert>


    <!-- 列表(全部) 自动创建，禁止修改-->
    <select id="dataList" parameterType="com.yvan.PageData" resultType="com.xy.vmes.entity.WarehouseOutDetail">
        select
        <include refid="Field"></include>
        from
        <include refid="tableName"></include>
        <choose>
            <!--
                mapSize (0 or is null) 无查询参数-业务层传入
                isQueryAll 是否查询全部
                fasle: (false or is null) 无查询条件-查询结果集返回空或list.size()==0
                true : 无查询条件-返回全部业务表数据
            -->
            <when test="(mapSize == null || mapSize == 0) and 'true' != isQueryAll ">
                where 1=2
            </when>
            <otherwise>
                <where>
                    <!--isSelfExist 是否考虑自己在业务表中是否存在
                        false: (false or is null) 无需考虑自己在业务表中是否存在
                        true : 需要考虑自己在业务表中是否存在
                    -->
                    <if test="id != null and id != ''" >
                        <choose>
                            <when test="'true' == isSelfExist">
                                <![CDATA[ and id <> #{id} ]]>
                            </when>
                            <otherwise>
                                and id = #{id}
                            </otherwise>
                        </choose>
                    </if>
                    <if test="parentId != null and parentId != ''" >
                        and parent_id = #{parentId}
                    </if>
                    <if test="code != null and code != ''" >
                        and code = #{code}
                    </if>
                    <if test="productId != null and productId != ''" >
                        and product_id = #{productId}
                    </if>
                    <if test="warehouseId != null and warehouseId != ''" >
                        and warehouse_id = #{warehouseId}
                    </if>
                    <if test="state != null and state != ''" >
                        and state = #{state}
                    </if>

                    <!--isNeedDeliver-->
                    <if test="'true' == isNeedDeliver" >
                        and id in (
                            select out_detail_id
                            from vmes_sale_deliver_detail
                            where parent_id = #{deliverId}
                        )
                    </if>

                    <!--queryStr 自定义sql查询语句-->
                    <if test="queryStr != null and queryStr != ''" >
                        and ${queryStr}
                    </if>
                </where>
            </otherwise>
        </choose>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>




    <!-- 字段 自动创建，可以修改-->
    <sql id="Field1">
            detail.parent_id parentId,
            detail.warehouse_id warehouseId,
            detail.product_id productId,
            detail.code code,
            round(detail.count,2) count,
            detail.state state,
            case when detail.state=-1 then '已取消' when detail.state=0 then '待派单' when detail.state=1 then '执行中' when detail.state=2 then '已完成' else null end stateName,
            detail.cuser cuser,
            DATE_FORMAT(detail.cdate,'%Y-%m-%d %T') cdate,
            detail.uuser uuser,
            DATE_FORMAT(detail.udate,'%Y-%m-%d %T') udate,
            detail.remark remark,
            detail.isdisable isdisable,
            detail.qrcode qrcode,
            detail.business_id businessId,

            prod.code productCode,
            prod.name productName,
            prod.spec productSpec,
            prod.genre productGenre,
            genre.name productGenreName,
            produnit.unit productUnit,
            unit.name productUnitName,

            whout.code warehouseOutCode,
            whout.warehouse_id parentWarehouseId,

            round(outexecute.count,2) executeCount,
            detail.id id
    </sql>

    <!-- 字段值 自动创建，可以修改-->
    <!--
    <sql id="Column1">
            '入库单ID'  parentId,
            '执行人ID'  executeId,
            ' (推荐)货位ID'  warehouseId,
            '产品ID'  productId,
            '货位批次号'  code,
            '入库数量'  count,
            '状态(0:待派单 1:执行中 2:已完成)'  state,
            '创建用户id'  cuser,
            '创建时间'  cdate,
            '修改用户id'  uuser,
            '修改时间'  udate,
            '备注'  remark,
            '是否启用(0:已禁用 1:启用)'  isdisable,
            'id' id_hide
    </sql>
     -->

    <!-- 自动创建，可以修改 -->
    <!--
    <select id="getColumnList"  resultType="java.util.LinkedHashMap">
        select
        <include refid="Column1"></include>
        from dual
    </select>
    -->

    <!-- 自动创建，可以修改 -->
    <select id="getDataList"  parameterType="com.yvan.PageData"  resultType="java.util.Map">
        select parentId,warehouseId,productId,code,count,state,stateName,cuser,cdate,udate,remark,isdisable,qrcode,
        businessId,productCode,productName,productSpec,productGenre,productGenreName,productUnit,productUnitName,round(sum(ifnull(executeCount,0)),2) executeCount,warehouseOutCode,id

        from (
            select
            <include refid="Field1"></include>
            from
            vmes_warehouse_out_detail detail
            left join vmes_warehouse_out whout on whout.id = detail.parent_id
            left join vmes_warehouse_out_execute outexecute on outexecute.detail_id = detail.id and outexecute.isdisable = '1'
            left join vmes_product prod on prod.id = detail.product_id
            left join vmes_product_unit produnit on produnit.product_id = prod.id and produnit.type = 1
            left join vmes_dictionary genre on prod.genre = genre.id
            left join vmes_dictionary unit on produnit.unit = unit.id
            left join vmes_dictionary lastUnit on prod.last_unit = lastUnit.id
            left join vmes_dictionary type on prod.type = type.id
            <where>
                <!--queryStr 自定义sql查询语句-->
                <if test="queryStr != null and queryStr != ''" >
                    and ${queryStr}
                </if>
                <if test="parentId != null and parentId != ''">
                    and detail.parent_id =  #{parentId}
                </if>
                <if test="productCode != null and productCode != ''">
                    and prod.code LIKE CONCAT(CONCAT('%', #{productCode}),'%')
                </if>
                <if test="productName != null and productName != ''">
                    and prod.name LIKE CONCAT(CONCAT('%', #{productName}),'%')
                </if>
                <if test="productSpec != null and productSpec != ''">
                    and prod.spec LIKE CONCAT(CONCAT('%', #{productSpec}),'%')
                </if>
                <if test="productGenreName != null and productGenreName != ''">
                    and genre.name LIKE CONCAT(CONCAT('%', #{productGenreName}),'%')
                </if>
                <if test="productUnitName != null and productUnitName != ''">
                    and unit.name LIKE CONCAT(CONCAT('%', #{productUnitName}),'%')
                </if>

                <if test="detailState != null and detailState != ''">
                    and detail.state =  #{detailState}
                </if>
            </where>
        ) tab
        group by id,parentId,warehouseId,productId,code,count,state,stateName,cuser,cdate,udate,remark,isdisable,qrcode,
        businessId,productCode,productName,productSpec,productGenre,productGenreName,productUnit,productUnitName,warehouseOutCode,parentWarehouseId

        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>





    <!-- 自动创建，可以修改 -->
    <select id="getDataListPageForAddFromBOM"  parameterType="com.yvan.PageData"  resultType="java.util.Map">
        select
            prod.id id,
            prod.id productId,
            case when prod.source_code is null then prod.code else prod.source_code end productCode,
            prod.name productName,
            prod.spec productSpec,
            prod.genre productGenre,
            round(ifnull(prod.stock_count,0),2) stockCountByPrice,
            genre.name productGenreName,
            priceUnitFormula.unit productUnit,
            priceUnitFormula.unit priceUnit,
            unit.name productUnitName,
            unit.name priceUnitName,
            null priceCount,

            priceUnitFormula.np_formula n2pFormula,
            priceUnitFormula.n2p_is_scale n2pIsScale,
            priceUnitFormula.n2p_decimal_count n2pDecimalCount,

            priceUnitFormula.pn_formula p2nFormula,
            priceUnitFormula.p2n_is_scale p2nIsScale,
            priceUnitFormula.p2n_decimal_count p2nDecimalCount

        from vmes_product prod
        left join vmes_dictionary genre on prod.genre = genre.id
        left join vmes_product_unit priceUnitFormula on prod.id = priceUnitFormula.product_id and priceUnitFormula.isdisable = '1' and priceUnitFormula.type = '1'
        left join vmes_dictionary unit on priceUnitFormula.unit = unit.id
        <where>
            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>
            <if test="prodIds != null and prodIds != ''">
                and prod.id  in (${prodIds})
            </if>
            <if test="productCode != null and productCode != ''">
                and prod.code LIKE CONCAT(CONCAT('%', #{productCode}),'%')
            </if>
            <if test="productName != null and productName != ''">
                and prod.name LIKE CONCAT(CONCAT('%', #{productName}),'%')
            </if>
            <if test="productSpec != null and productSpec != ''">
                and prod.spec LIKE CONCAT(CONCAT('%', #{productSpec}),'%')
            </if>
            <if test="productGenreName != null and productGenreName != ''">
                and genre.name LIKE CONCAT(CONCAT('%', #{productGenreName}),'%')
            </if>
            <if test="productUnitName != null and productUnitName != ''">
                and unit.name LIKE CONCAT(CONCAT('%', #{productUnitName}),'%')
            </if>
        </where>
    </select>





    <!-- 自动创建，可以修改 -->
    <select id="getDataListPage"  parameterType="com.yvan.PageData"  resultType="java.util.Map">
        select
            parentId,warehouseId,productId,code,round(ifnull(count,0),2) count,state,stateName,cuser,cdate,udate,remark,isdisable,qrcode,pathName,warehouseName,
            businessId,productCode,productName,productSpec,productGenre,productProperty,productGenreName,productUnit,productUnitName,warehouseOutCode,parentWarehouseId,id,
            priceUnit,priceUnitName,round(ifnull(priceCount,0),2) priceCount,round(ifnull(productCount,0),2) productCount,warehouseProductId,
            n2pFormula,n2pIsScale,n2pDecimalCount,
            p2nFormula,p2nIsScale,p2nDecimalCount,stockCount,stockCountByPrice,
            price,productPrice,priceSum,productPriceSum,warehouseProductStockCount,
            round(sum(ifnull(executeCount,0)),2) executeCount
        from (
            select
                detail.id id,
                detail.parent_id parentId,
                detail.warehouse_id warehouseId,
                warehouse.path_name pathName,
                warehouse.name warehouseName,
                detail.product_id productId,
                detail.code code,
                detail.count count,
                detail.state state,
                case when detail.state=-1 then '已取消' when detail.state=0 then '待派单' when detail.state=1 then '执行中' when detail.state=2 then '已完成' else null end stateName,
                detail.cuser cuser,
                DATE_FORMAT(detail.cdate,'%Y-%m-%d %T') cdate,
                detail.uuser uuser,
                DATE_FORMAT(detail.udate,'%Y-%m-%d %T') udate,
                detail.remark remark,
                detail.isdisable isdisable,
                detail.qrcode qrcode,
                detail.business_id businessId,
                detail.warehouse_product_id warehouseProductId,

                detail.product_unit productUnit,
                detail.product_count productCount,
                detail.price_unit priceUnit,
                detail.price_count priceCount,
                ifnull(detail.price, 0) price,
                round(ifnull(detail.product_price, 0), 2)  productPrice,

                round((ifnull(detail.price_count, 0) * ifnull(detail.price, 0)), 2) priceSum,
                round((ifnull(detail.count, 0) * ifnull(detail.product_price, 0)), 2) productPriceSum,
                round(ifnull(warehouseProduct.stock_count,0),2) warehouseProductStockCount,

                prod.code sysProductCode,
                prod.source_code custProductCode,
                CASE
                  WHEN prod.source_code is null THEN prod.code
                  WHEN prod.source_code is not null THEN prod.source_code
                ELSE null
                END productCode,
                prod.name productName,
                prod.spec productSpec,
                prod.genre productGenre,
                prod.property productProperty,
                genre.name productGenreName,
                productUnit.name productUnitName,
                priceUnit.name priceUnitName,
                ifnull(prod.stock_count, 0) stockCount,
                '' stockCountByPrice,

                priceUnitFormula.np_formula n2pFormula,
                priceUnitFormula.n2p_is_scale n2pIsScale,
                priceUnitFormula.n2p_decimal_count n2pDecimalCount,

                priceUnitFormula.pn_formula p2nFormula,
                priceUnitFormula.p2n_is_scale p2nIsScale,
                priceUnitFormula.p2n_decimal_count p2nDecimalCount,

                whout.code warehouseOutCode,
                whout.warehouse_id parentWarehouseId,
                outexecute.count executeCount
            from
            vmes_warehouse_out_detail detail
                left join vmes_warehouse_out whout on whout.id = detail.parent_id
                left join vmes_warehouse_out_execute outexecute on outexecute.detail_id = detail.id and outexecute.isdisable = '1'
                left join vmes_warehouse warehouse on warehouse.id = detail.warehouse_id
                left join vmes_product prod on prod.id = detail.product_id
                left join vmes_dictionary genre on prod.genre = genre.id
                left join vmes_dictionary productUnit on detail.product_unit = productUnit.id
                left join vmes_dictionary priceUnit on detail.price_unit = priceUnit.id
                <!--货品计价单位公式-->
                left join vmes_product_unit priceUnitFormula on detail.product_id = priceUnitFormula.product_id and detail.price_unit = priceUnitFormula.unit and priceUnitFormula.isdisable = '1'
                left join vmes_warehouse_product warehouseProduct on detail.warehouse_product_id = warehouseProduct.id
            <where>
                <!--queryStr 自定义sql查询语句-->
                <if test="queryStr != null and queryStr != ''" >
                    and ${queryStr}
                </if>
                <if test="parentId != null and parentId != ''">
                    and detail.parent_id =  #{parentId}
                </if>
                <if test="detailId != null and detailId != ''">
                    and detail.id =  #{detailId}
                </if>

                <if test="businessCode != null and businessCode != ''">
                    and whout.business_code =  #{businessCode}
                </if>

                <if test="currentCompanyId != null and currentCompanyId != ''" >
                    and whout.company_id = #{currentCompanyId}
                </if>


                <if test="productCode != null and productCode != ''">
                    and prod.code LIKE CONCAT(CONCAT('%', #{productCode}),'%')
                </if>
                <if test="productName != null and productName != ''">
                    and prod.name LIKE CONCAT(CONCAT('%', #{productName}),'%')
                </if>
                <if test="productSpec != null and productSpec != ''">
                    and prod.spec LIKE CONCAT(CONCAT('%', #{productSpec}),'%')
                </if>
                <if test="productGenreName != null and productGenreName != ''">
                    and genre.name LIKE CONCAT(CONCAT('%', #{productGenreName}),'%')
                </if>
                <if test="productUnitName != null and productUnitName != ''">
                    and unit.name LIKE CONCAT(CONCAT('%', #{productUnitName}),'%')
                </if>

                <if test="detailState != null and detailState != ''">
                    and detail.state =  #{detailState}
                </if>
            </where>
        ) tab
        group by id,parentId,warehouseId,productId,code,count,state,stateName,cuser,cdate,udate,remark,isdisable,qrcode,warehouseProductId,
        businessId,productCode,productName,productSpec,productGenre,productGenreName,productUnit,productUnitName,warehouseOutCode,parentWarehouseId,
        priceUnit,priceUnitName,priceCount,productCount,
        n2pFormula,n2pIsScale,n2pDecimalCount,
        p2nFormula,p2nIsScale,p2nDecimalCount
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

    <update id="updateStateByDetail" parameterType="com.yvan.PageData" >
        update vmes_warehouse_out_detail set
        state = #{state},
        udate = now()
        <where>
            <if test="parentId != null and parentId != ''" >
                and parent_id = #{parentId}
            </if>
            <if test="parentIds != null and parentIds != ''" >
                and ${parentIds}
            </if>
        </where>
    </update>

    <select id="findWarehouseOutDetailList" parameterType="com.yvan.PageData" resultType="java.util.Map">
        select
            a.id outDetailId,
            a.parent_id parentId,
            a.execute_id executeId,
            <!--推荐货位id-->
            warehouseProduct.warehouse_id warehouseId,
            <!--推荐货位货品id-->
            warehouseProduct.product_id productId,

            <!--推荐货位批次-->
            warehouseProduct.code code,
            round(ifnull(a.count,0) , 2) taskCount,
            a.state state,
            CASE
                WHEN a.state = '0' THEN '待派单'
                WHEN a.state = '1' THEN '执行中'
                WHEN a.state = '2' THEN '已完成'
                WHEN a.state = '-1' THEN '已取消'
            ELSE null
            END stateName,
            a.cuser cuser,
            a.cdate cdate,
            a.uuser uuser,

            a.udate udate,
            a.remark remark,
            a.isdisable isdisable,
            a.qrcode qrcode,
            a.business_id businessId,

            warehouse.path_name pathName,
            <!--货品表-->
            prod.code productCode,
            prod.name productName,
            prod.spec productSpec,
            produnit.unit productUnit,
            unit.name productUnitName,
            prod.genre productGenre,
            genre.name productGenreName,
            prod.type productType,

            <!--出库任务开始时间 (出库明细id)出库执行分配表汇总-->
            DATE_FORMAT(min(executor.cdate),'%Y-%m-%d %T') startDate,
            <!--出库任务结束时间 (出库明细id)出库执行表汇总-->
            DATE_FORMAT(max(outExecute.cdate),'%Y-%m-%d %T') endDate,

            <!--出库单表-->
            parent.code parentCode,
            outType.name typeName,
            parent.dept_name deptName,
            parent.make_id makeId,
            <!--获取已执行数量-出库执行表-->
            round(ifnull(outDtlExecute.executeCount,0),2) executeCount,
            <!--剩余数量-->
            round((ifnull(a.count,0) - ifnull(outDtlExecute.executeCount,0)), 2) unExecuteCount,

            warehouseProduct.warehouseProductId,
            <!--建议取货数量-->
            case
              when (ifnull(a.count,0) - ifnull(outDtlExecute.executeCount,0)) <![CDATA[ > ]]> ifnull(warehouseProduct.stock_count,0) then round(ifnull(warehouseProduct.stock_count,0), 2)
              when (ifnull(a.count,0) - ifnull(outDtlExecute.executeCount,0)) <![CDATA[ <= ]]> ifnull(warehouseProduct.stock_count,0) then round((ifnull(a.count,0) - ifnull(outDtlExecute.executeCount,0)), 2)
            else 0.00
            end suggestCount

        from vmes_warehouse_out_detail a
            left join vmes_warehouse_out parent on a.parent_id = parent.id
            left join vmes_dictionary outType on parent.type = outType.id

            left join (
                <!--出库任务开始时间 (出库明细id)出库执行分配表汇总-->
                select detail_id,min(cdate) cdate
                from vmes_warehouse_out_executor
                group by detail_id
            ) executor on a.id = executor.detail_id

            left join (
                <!--出库任务结束时间 (出库明细id)出库执行表汇总-->
                select detail_id,max(cdate) cdate
                from vmes_warehouse_out_execute
                group by detail_id
            ) outExecute on a.id = outExecute.detail_id

            <!--出库执行表汇总-->
            left join (
                select detail_id, sum(count) executeCount
                from vmes_warehouse_out_execute
                group by detail_id
            ) outDtlExecute on a.id = outDtlExecute.detail_id

            <!--获取出库推荐货位库存数量(出库明细id)汇总-->
            left join (
                select
                    table_1.detail_id,table_1.warehouse_id, table_1.product_id,table_1.code,
                    table_2.stock_count,table_2.warehouseProductId
                from (
                    <!--获取最小批次 (出库明细id,货位id,货品id,批次号) 汇总-->
                    select
                        a.detail_id,b.warehouse_id, b.product_id, min(b.code) code,
                        concat(b.warehouse_id,'-',b.product_id,'-',min(b.code)) keyStr
                    from vmes_warehouse_out_recommend a
                    left join vmes_warehouse_product b on a.warehouse_product_id = b.id
                    <where>
                        <if test="outDetailId != null and outDetailId != ''" >
                            and a.detail_id = #{outDetailId}
                        </if>
                        <!-- and b.stock_count > 0 -->
                    </where>
                    group by a.detail_id,b.warehouse_id,b.product_id
                ) table_1
                left join (
                    select
                        concat(b.warehouse_id,'-',b.product_id,'-',b.code) keyStr,b.stock_count,b.id warehouseProductId
                    from vmes_warehouse_out_recommend a
                        left join vmes_warehouse_product b on a.warehouse_product_id = b.id
                    <where>
                        <if test="outDetailId != null and outDetailId != ''" >
                            and a.detail_id = #{outDetailId}
                        </if>
                        <!-- and b.stock_count > 0 -->
                    </where>
                ) table_2 on table_1.keyStr = table_2.keyStr
            ) warehouseProduct on a.id = warehouseProduct.detail_id

            left join vmes_warehouse warehouse on warehouseProduct.warehouse_id = warehouse.id
            left join vmes_product prod on warehouseProduct.product_id = prod.id
            left join vmes_product_unit produnit on produnit.product_id = prod.id and produnit.type = 1
            left join vmes_dictionary unit on produnit.unit = unit.id
            left join vmes_dictionary genre on prod.genre = genre.id

        <where>
            <if test="outDetailId != null and outDetailId != ''" >
                and a.id = #{outDetailId}
            </if>
            <if test="parentId != null and parentId != ''" >
                and a.parent_id = #{parentId}
            </if>
            <if test="state != null and state != ''" >
                and a.state = #{state}
            </if>

            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>
        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>

    </select>





</mapper>