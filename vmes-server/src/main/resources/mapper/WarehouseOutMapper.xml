<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
说明：出库 Mapper.xml
创建人：刘威 自动创建
创建时间：2018-10-22
 -->
<mapper namespace="com.xy.vmes.deecoop.warehouse.dao.WarehouseOutMapper">

    <!--表名 自动创建，禁止修改-->
    <sql id="tableName">
	vmes_warehouse_out
    </sql>

    <!-- 字段 自动创建，禁止修改-->
    <sql id="Field">
		company_id companyId,<!-- 企业ID-组织架构 -->
		code code,<!-- 出库单编码 -->
		type type,<!-- 出库类型-(字典表-vmes_dictionary.id) -->
		warehouse_id warehouseId,<!-- 仓库ID(仓库表-layer:2的记录) -->
		dept_id deptId,<!-- 单位id(部门id或客户id) -->
		dept_name deptName,<!-- 单位名称(部门或客户) -->
		make_id makeId,<!-- 制单人ID -->
		state state,<!-- 状态(0:未完成 1:已完成 -1:已取消) -->
		cuser cuser,<!-- 创建用户id -->
		cdate cdate,<!-- 创建时间 -->
		uuser uuser,<!-- 修改用户id -->
		udate udate,<!-- 修改时间 -->
		remark remark,<!-- 备注 -->
		isdisable isdisable,<!-- 是否启用(0:已禁用 1:启用) -->
		id id, <!-- id -->
        is_simple isSimple
    </sql>

    <!-- 字段值 自动创建，禁止修改-->
    <sql id="FieldValue">
		#{companyId},<!-- 企业ID-组织架构 -->
		#{code},<!-- 出库单编码 -->
		#{type},<!-- 出库类型-(字典表-vmes_dictionary.id) -->
		#{warehouseId},<!-- 仓库ID(仓库表-layer:2的记录) -->
		#{deptId},<!-- 单位id(部门id或客户id) -->
		#{deptName},<!-- 单位名称(部门或客户) -->
		#{makeId},<!-- 制单人ID -->
		#{state},<!-- 状态(0:未完成 1:已完成 -1:已取消) -->
		#{cuser},<!-- 创建用户id -->
		#{cdate},<!-- 创建时间 -->
		#{uuser},<!-- 修改用户id -->
		#{udate},<!-- 修改时间 -->
		#{remark},<!-- 备注 -->
		#{isdisable},<!-- 是否启用(0:已禁用 1:启用) -->
		#{id} <!-- id -->
    </sql>


    <!-- 字段名称  '_hide' 表示前端列表隐藏 自动创建，禁止修改-->
    <sql id="Column">
        '企业ID-组织架构'  companyId,
        '出库单编码'  code,
        '出库类型-(字典表-vmes_dictionary.id)'  type,
        '仓库ID(仓库表-layer:2的记录)'  warehouseId,
        '单位id(部门id或客户id)'  deptId,
        '单位名称(部门或客户)'  deptName,
        '制单人ID'  makeId,
        '状态(0:未完成 1:已完成 -1:已取消)'  state,
        '创建用户id'  cuser,
        '创建时间'  cdate,
        '修改用户id'  uuser,
        '修改时间'  udate,
        '备注'  remark,
        '是否启用(0:已禁用 1:启用)'  isdisable,
        'id' id_hide
    </sql>

    <!-- 自动创建，禁止修改 -->
    <select id="findColumnList"  resultType="java.util.LinkedHashMap">
        select
        <include refid="Column"></include>
        from dual
    </select>

    <!-- 自动创建，禁止修改 -->
    <select id="findDataList"  parameterType="com.yvan.PageData"  resultType="java.util.Map">
        select
        <include refid="Field"></include>
        from
        <include refid="tableName"></include>
        <where>
            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr!=''" >
                and ${queryStr}
            </if>
        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

    <!-- 列表 自动创建，禁止修改-->
    <select id="datalistPage" parameterType="com.yvan.PageData" resultType="com.xy.vmes.entity.WarehouseOut">
        select
        <include refid="Field"></include>
        from
        <include refid="tableName"></include>
        <where>
            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr!=''" >
                and ${queryStr}
            </if>
        </where>
    </select>


    <!-- 批量删除 自动创建，禁止修改-->
    <delete id="deleteByIds" parameterType="java.lang.String">
        delete from
        <include refid="tableName"></include>
        where
        id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
		#{item}
        </foreach>
    </delete>


    <!-- 自动创建，禁止修改-->
    <update id="updateToDisableByIds" parameterType="java.lang.String" >
        update
        <include refid="tableName"></include>
        set isdisable = '0' ,udate = now()
        where
        id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
        #{item}
        </foreach>
    </update>



    <!-- ***************************************************以上为自动生成代码禁止修改，请在下面添加业务代码************************************************* -->
    <delete id="deleteTableByDetail" parameterType="com.yvan.PageData">
        delete from vmes_warehouse_out_detail
        where parent_id in (
            select id from vmes_warehouse_out
            <where>
                <if test="companyId != null and companyId != ''" >
                    and company_id = #{companyId}
                </if>
            </where>
        )
    </delete>

    <delete id="deleteTableByExecutor" parameterType="com.yvan.PageData">
        delete from vmes_warehouse_out_executor
        where detail_id in (
            select id from vmes_warehouse_out_detail
            where parent_id in (
                select id from vmes_warehouse_out
                <where>
                    <if test="companyId != null and companyId != ''" >
                        and company_id = #{companyId}
                    </if>
                </where>
            )
        )
    </delete>

    <delete id="deleteTableByExecute" parameterType="com.yvan.PageData">
        delete from vmes_warehouse_out_execute
        where detail_id in (
            select id from vmes_warehouse_out_detail
            where parent_id in (
                select id from vmes_warehouse_out
                <where>
                    <if test="companyId != null and companyId != ''" >
                        and company_id = #{companyId}
                    </if>
                </where>
            )
        )
    </delete>

    <delete id="deleteTableByRecommend" parameterType="com.yvan.PageData">
        delete from vmes_warehouse_out_recommend
        where detail_id in (
            select id from vmes_warehouse_out_detail
            where parent_id in (
                select id from vmes_warehouse_out
                <where>
                    <if test="companyId != null and companyId != ''" >
                        and company_id = #{companyId}
                    </if>
                </where>
            )
        )
    </delete>

    <update id="updateStateByOut" parameterType="com.yvan.PageData" >
        update vmes_warehouse_out set
        state = #{state},
        udate = now()
        <where>
            <if test="ids != null and ids != ''" >
                and ${ids}
            </if>
        </where>
    </update>

    <insert id="insertColumn" >
        delete from vmes_column where model_code = 'WarehouseOut' ;
        insert into vmes_column (
        id,model_code,title_key,title_name,serial_number,
        isdisable,ishide,isedit,ismust,cdate,
        cuser
        ) VALUES
            (replace(uuid(), '-', ''),'WarehouseOut','companyId','企业ID-组织架构',1, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','code','出库单号',2, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','type','出库类型ID',3, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','typeName','出库类型',3, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','warehouseName','仓库',4, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','warehouseId','仓库ID',4, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','deptId','单位id',5, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','deptName','接收单位',6, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','makeName','制单人',7, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','makeId','制单人ID',7, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','cdate','制单时间',8, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','cuser','创建用户id',8, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','state','状态',9, '1','1','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','stateName','状态',9, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','uuser','修改用户id',11, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','udate','修改时间',12, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','remark','备注',13, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','isdisable','是否启用',14, '1','0','1','0',now(), 'admin'),
            (replace(uuid(), '-', ''),'WarehouseOut','id','id',0, '1','0','1','0',now(), 'admin')
    </insert>


    <!-- 列表(全部) 自动创建，禁止修改-->
    <select id="dataList" parameterType="com.yvan.PageData" resultType="com.xy.vmes.entity.WarehouseOut">
        select
        <include refid="Field"></include>
        from
        <include refid="tableName"></include>
        <choose>
            <!--
                mapSize (0 or is null) 无查询参数-业务层传入
                isQueryAll 是否查询全部
                fasle: (false or is null) 无查询条件-查询结果集返回空或list.size()==0
                true : 无查询条件-返回全部业务表数据
            -->
            <when test="(mapSize == null || mapSize == 0) and 'true' != isQueryAll ">
                where 1=2
            </when>
            <otherwise>
                <where>
                    <!--isSelfExist 是否考虑自己在业务表中是否存在
                        false: (false or is null) 无需考虑自己在业务表中是否存在
                        true : 需要考虑自己在业务表中是否存在
                    -->
                    <if test="id != null and id != ''" >
                        <choose>
                            <when test="'true' == isSelfExist">
                                <![CDATA[ and id <> #{id} ]]>
                            </when>
                            <otherwise>
                                and id = #{id}
                            </otherwise>
                        </choose>
                    </if>
                    <if test="code != null and code != ''" >
                        and code = #{code}
                    </if>
                    <if test="companyId != null and companyId != ''" >
                        and company_id = #{companyId}
                    </if>

                    <if test="type != null and type != ''" >
                        and type = #{type}
                    </if>
                    <if test="warehouseId != null and warehouseId != ''" >
                        and warehouse_id = #{warehouseId}
                    </if>

                    <!--queryStr 自定义sql查询语句-->
                    <if test="queryStr != null and queryStr != ''" >
                        and ${queryStr}
                    </if>
                </where>
            </otherwise>
        </choose>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>




    <!-- 字段 自动创建，可以修改-->
    <sql id="Field1">
        distinct
        warehouseout.company_id companyId,<!-- 企业ID-组织架构 -->
        warehouseout.code code,<!-- 出库单编码 -->
        warehouseout.type,<!-- 出库类型-(字典表-vmes_dictionary.id) -->
        type.name typeName,
        warehouse.name warehouseName,
        warehouseout.warehouse_id warehouseId,<!-- 仓库ID(仓库表-layer:2的记录) -->
        warehouseout.dept_id deptId,<!-- 单位id(部门id或客户id) -->
        warehouseout.dept_name deptName,<!-- 单位名称(部门或客户) -->
        user.user_name makeName,
        warehouseout.make_id makeId,<!-- 制单人ID -->
        warehouseout.state state,<!-- 状态(0:未完成 1:已完成 -1:已取消) -->
        case when warehouseout.state=-1 then '已取消' when warehouseout.state=0 then '未完成' when warehouseout.state=1 then '已完成' else null end stateName,<!-- 状态(0:未完成 1:已完成 -1:已取消) -->
        warehouseout.cuser cuser,<!-- 创建用户id -->
        DATE_FORMAT(warehouseout.cdate,'%Y-%m-%d') cdate,
        warehouseout.uuser uuser,<!-- 修改用户id -->
        DATE_FORMAT(warehouseout.udate,'%Y-%m-%d') udate,
        warehouseout.remark remark,<!-- 备注 -->
        warehouseout.isdisable isdisable,<!-- 是否启用(0:已禁用 1:启用) -->
        warehouseout.id id, <!-- id -->
        warehouseout.is_simple isSimple
    </sql>

    <!-- 字段值 自动创建，可以修改-->
    <!--
    <sql id="Column1">
            '企业ID-组织架构'  companyId,
            '出库单编码'  code,
            '出库类型-(字典表-vmes_dictionary.id)'  type,
            '仓库ID(仓库表-layer:2的记录)'  warehouseId,
            '单位id(部门id或客户id)'  deptId,
            '单位名称(部门或客户)'  deptName,
            '制单人ID'  makeId,
            '状态(0:未完成 1:已完成 -1:已取消)'  state,
            '创建用户id'  cuser,
            '创建时间'  cdate,
            '修改用户id'  uuser,
            '修改时间'  udate,
            '备注'  remark,
            '是否启用(0:已禁用 1:启用)'  isdisable,
            'id' id_hide
    </sql>
     -->

    <!-- 自动创建，可以修改 -->
    <!--
    <select id="getColumnList"  resultType="java.util.LinkedHashMap">
        select
        <include refid="Column1"></include>
        from dual
    </select>
    -->

    <!-- 自动创建，可以修改 -->
    <select id="getDataList"  parameterType="com.yvan.PageData"  resultType="java.util.Map">
        select
        <include refid="Field1"></include>
        from
        vmes_warehouse_out warehouseout
        left join vmes_dictionary type on type.id = warehouseout.type
        left join vmes_warehouse warehouse on warehouse.id = warehouseout.warehouse_id
        left join vmes_user user on user.id = warehouseout.make_id

        left join vmes_warehouse_out_detail detail on detail.parent_id = warehouseout.id
        left join vmes_product prod on prod.id = detail.product_id
        left join vmes_product_unit produnit on produnit.product_id = prod.id and produnit.type = 1
        left join vmes_dictionary genre on prod.genre = genre.id
        left join vmes_dictionary unit on produnit.unit = unit.id

        <where>
            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>
            <if test="code != null and code != ''">
                and warehouseout.code LIKE CONCAT(CONCAT('%', #{code}),'%')
            </if>
            <if test="currentCompanyId != null and currentCompanyId != ''">
                and warehouseout.company_id = #{currentCompanyId}
            </if>

            <if test="typeName != null and typeName != ''">
                and type.name LIKE CONCAT(CONCAT('%', #{typeName}),'%')
            </if>
            <if test="warehouseName != null and warehouseName != ''">
                and warehouse.name LIKE CONCAT(CONCAT('%', #{warehouseName}),'%')
            </if>
            <if test="deptName != null and deptName != ''">
                and warehouseout.dept_name LIKE CONCAT(CONCAT('%', #{deptName}),'%')
            </if>
            <if test="state != null and state != ''">
                and warehouseout.state =  #{state}
            </if>
            <if test="isSimple != null and isSimple != ''" >
                and warehouseout.is_simple = #{isSimple}
            </if>

            <if test="productCode != null and productCode != ''">
                and prod.code LIKE CONCAT(CONCAT('%', #{productCode}),'%')
            </if>
            <if test="productName != null and productName != ''">
                and prod.name LIKE CONCAT(CONCAT('%', #{productName}),'%')
            </if>
            <if test="productSpec != null and productSpec != ''">
                and prod.spec LIKE CONCAT(CONCAT('%', #{productSpec}),'%')
            </if>
            <if test="productGenreName != null and productGenreName != ''">
                and genre.name LIKE CONCAT(CONCAT('%', #{productGenreName}),'%')
            </if>
            <if test="productUnitName != null and productUnitName != ''">
                and unit.name LIKE CONCAT(CONCAT('%', #{productUnitName}),'%')
            </if>

            <if test="detailState != null and detailState != ''">
                and detail.state =  #{detailState}
            </if>


        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

    <!-- 自动创建，可以修改 -->
    <select id="getDataListPage"  parameterType="com.yvan.PageData"  resultType="java.util.Map">
        select
        <include refid="Field1"></include>
        from
        vmes_warehouse_out warehouseout
        left join vmes_dictionary type on type.id = warehouseout.type
        left join vmes_warehouse warehouse on warehouse.id = warehouseout.warehouse_id
        left join vmes_user user on user.id = warehouseout.make_id

        left join vmes_warehouse_out_detail detail on detail.parent_id = warehouseout.id
        left join vmes_product prod on prod.id = detail.product_id
        left join vmes_product_unit produnit on produnit.product_id = prod.id and produnit.type = 1
        left join vmes_dictionary genre on prod.genre = genre.id
        left join vmes_dictionary unit on produnit.unit = unit.id

        <where>
            <if test="parentId != null and parentId != ''" >
                and warehouseout.id = #{parentId}
            </if>
            <if test="code != null and code != ''">
                and warehouseout.code LIKE CONCAT(CONCAT('%', #{code}),'%')
            </if>
            <if test="currentCompanyId != null and currentCompanyId != ''">
                and warehouseout.company_id = #{currentCompanyId}
            </if>

            <if test="typeName != null and typeName != ''">
                and type.name LIKE CONCAT(CONCAT('%', #{typeName}),'%')
            </if>
            <if test="warehouseName != null and warehouseName != ''">
                and warehouse.name LIKE CONCAT(CONCAT('%', #{warehouseName}),'%')
            </if>
            <if test="deptName != null and deptName != ''">
                and warehouseout.dept_name LIKE CONCAT(CONCAT('%', #{deptName}),'%')
            </if>
            <if test="state != null and state != ''">
                and warehouseout.state =  #{state}
            </if>
            <if test="isSimple != null and isSimple != ''" >
                and warehouseout.is_simple = #{isSimple}
            </if>


            <if test="productCode != null and productCode != ''">
                and prod.code LIKE CONCAT(CONCAT('%', #{productCode}),'%')
            </if>
            <if test="productName != null and productName != ''">
                and prod.name LIKE CONCAT(CONCAT('%', #{productName}),'%')
            </if>
            <if test="productSpec != null and productSpec != ''">
                and prod.spec LIKE CONCAT(CONCAT('%', #{productSpec}),'%')
            </if>
            <if test="productGenreName != null and productGenreName != ''">
                and genre.name LIKE CONCAT(CONCAT('%', #{productGenreName}),'%')
            </if>
            <if test="productUnitName != null and productUnitName != ''">
                and unit.name LIKE CONCAT(CONCAT('%', #{productUnitName}),'%')
            </if>

            <if test="detailState != null and detailState != ''">
                and detail.state =  #{detailState}
            </if>

            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>

        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>




</mapper>