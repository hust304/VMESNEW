<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
说明：仓库表(vmes_warehouse)-关联仓库货品表(vmes_warehouse_product) Mapper.xml
创建人：陈刚
创建时间：2019-08-09
 -->
<mapper namespace="com.xy.vmes.deecoop.warehouse.dao.WarehouseToWarehouseProductMapper">
    <insert id="warehouseToWarehouseProduct" >
        delete from vmes_column where model_code = 'warehouseToWarehouseProduct' ;
        insert into vmes_column (
        id,model_code,title_key,title_name,serial_number,
        isdisable,ishide,isedit,ismust,cdate,
        cuser
        ) VALUES
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','id','id',0, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','pid','上级id-根root',1, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','companyId','公司ID-组织架构',2, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','entityType','实体库-仓库类型-(货品属性一致)-(字典表-vmes_dictionary.id)',3, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','virtualGenre','虚拟库-属性(1:内部单位 2:外部单位)',4, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','virtualDeptId','内部单位(部门ID)',5, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','virtualDeptName','内部单位名称',6, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','virtualCustomerId','外部单位ID(客户id)',7, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','virtualCustomerName','外部单位名称',8, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','layer','货位级别',9, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','qrcode','二维码-(图片相对路径)',10, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','warehouseCode','货位编码',11, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','warehouseId','仓库ID',12, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','name','货位名称',13, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','nameEn','英文名称',14, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','deptId','货位所属部门ID',15, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','deptPlaceKey','部门货位ID-(字典表-vmes_dictionary.id)',16, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','pathName','货位名称',17, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','pathId','根节点到本节点路径ID',18, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','isopen','是否公开 (0:不公开:企业内部维护 1:公开:超级管理员维护)',19, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','remark','备注',20, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','cuser','创建用户id',21, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','cdate','创建时间',22, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','uuser','修改用户id',23, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','udate','修改时间',24, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','isdisable','是否启用(0:已禁用 1:启用)',25, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','isSimple','isSimple',26, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','serialNumber','同级排列序号',27, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','isLeaf','是否叶子(0:非叶子 1:是叶子)',28, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','productCode','货品编码',29, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','productName','货品名称',30, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','productSpec','规格型号',31, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','productUnit','计量单位',32, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','productUnitName','计量单位',32, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','productGenre','货品属性',33, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','productGenreName','货品属性',33, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','productType','productType',34, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','stockCount','库存数量',35, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','productPictureCode','图号',36, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProduct','warehouseTypeName','仓库类型',37, '1','1','1','0',now(), 'admin')

    </insert>


    <select id="findMapListWarehouseToWarehouseProduct" parameterType="com.yvan.PageData" resultType="java.util.Map">
        select
            warehouse.id id,
            warehouse.pid pid,
            warehouse.company_id companyId,
            warehouse.entity_type entityType,
            warehouse.virtual_genre virtualGenre,

            warehouse.virtual_dept_id virtualDeptId,
            warehouse.virtual_dept_name virtualDeptName,
            warehouse.virtual_customer_id virtualCustomerId,
            warehouse.virtual_customer_name virtualCustomerName,
            warehouse.layer layer,

            warehouse.qrcode qrcode,
            warehouse.code warehouseCode,
            warehouse.warehouse_id warehouseId,
            warehouse.name name,
            warehouse.name_en nameEn,

            warehouse.dept_id deptId,
            warehouse.dept_place_key deptPlaceKey,
            warehouse.path_name pathName,
            warehouse.path_id pathId,
            warehouse.isopen isopen,

            warehouse.remark remark,
            warehouse.cuser cuser,
            warehouse.cdate cdate,
            warehouse.uuser uuser,
            warehouse.udate udate,

            warehouse.isdisable isdisable,
            warehouse.is_simple isSimple,
            warehouse.serial_number serialNumber,
            warehouse.isLeaf,
            warehouseType.name warehouseTypeName,

            round(ifnull(wp.stock_count, 0), 2) stockCount,

            <!--货品表-->
            product.code productCode,
            product.name productName,
            product.spec productSpec,
            produnit.unit productUnit,
            unit.name productUnitName,
            product.genre productGenre,
            genre.name productGenreName,
            product.type productType,
            product.picture_code productPictureCode

        from vmes_warehouse warehouse
            left join vmes_warehouse_product wp on warehouse.id = wp.warehouse_id and warehouse.isdisable = '1' and wp.isdisable = '1'
            left join vmes_product product on wp.product_id = product.id and product.isdisable = '1'
            left join vmes_product_unit produnit on produnit.product_id = product.id and produnit.type = 1
            left join vmes_dictionary unit on produnit.unit = unit.id
            left join vmes_dictionary genre on product.genre = genre.id
            left join vmes_dictionary warehouseType on warehouse.entity_type = warehouseType.id

        <where>
            <if test="companyId != null and companyId != ''" >
                and warehouse.company_id = #{companyId}
            </if>

            <!--nodeId 树形结构指定节点id 自定义sql查询语句-->
            <if test="nodeId != null and nodeId != ''" >
                and warehouse.path_id LIKE CONCAT(CONCAT('%', #{nodeId}),'%')
            </if>
            <!--nodeId 实体库,虚拟库 自定义sql查询语句 查询结果集需要(实体库,虚拟库)-->
            <if test="'true' == isNeedEntityVirtual">
                <!--实体库:2d75e49bcb9911e884ad00163e105f05 虚拟库:56f5e83dcb9911e884ad00163e105f05 仓库表:vmes_warehouse-->
                and (warehouse.path_id LIKE '%2d75e49bcb9911e884ad00163e105f05%' or warehouse.path_id LIKE '%56f5e83dcb9911e884ad00163e105f05%')
            </if>
            <!--nodeId 实体库 自定义sql查询语句 查询结果集需要(实体库)-->
            <if test="'true' == isNeedEntity">
                <!--实体库:2d75e49bcb9911e884ad00163e105f05 -->
                and warehouse.path_id LIKE '%2d75e49bcb9911e884ad00163e105f05%'
            </if>
            <!--nodeId 虚拟库 自定义sql查询语句 查询结果集需要(虚拟库)-->
            <if test="'true' == isNeedVirtual">
                <!--虚拟库:56f5e83dcb9911e884ad00163e105f05 仓库表:vmes_warehouse-->
                and warehouse.path_id LIKE '%56f5e83dcb9911e884ad00163e105f05%'
            </if>

            <!--备件库 自定义sql查询语句-->
            <if test="'true' == isNeedSpare">
                and warehouse.name = '备件库'
            </if>
            <if test="'true' == isNotNeedSpare">
                <![CDATA[ and warehouse.name <> '备件库' ]]>
            </if>

        </where>
    </select>
    <!--******************************************************************************************************************************************-->
    <!--******************************************************************************************************************************************-->

    <!--获取全部仓库信息-并且得到仓库的货品库存数量-->
    <insert id="warehouseToWarehouseProductByProduct" >
        delete from vmes_column where model_code = 'warehouseToWarehouseProductByProduct' ;
        insert into vmes_column (
        id,model_code,title_key,title_name,serial_number,
        isdisable,ishide,isedit,ismust,cdate,
        cuser
        ) VALUES
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','id','id',0, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','warehouseId','货位id',0, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','pid','上级id-根root',1, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','companyId','公司ID-组织架构',2, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','entityType','实体库-仓库类型-(货品属性一致)-(字典表-vmes_dictionary.id)',3, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','virtualGenre','虚拟库-属性(1:内部单位 2:外部单位)',4, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','virtualDeptId','内部单位(部门ID)',5, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','virtualDeptName','内部单位名称',6, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','virtualCustomerId','外部单位ID(客户id)',7, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','virtualCustomerName','外部单位名称',8, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','layer','货位级别',9, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','qrcode','二维码-(图片相对路径)',10, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','warehouseCode','货位编码',11, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','warehouseId','仓库ID',12, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','name','货位名称',13, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','nameEn','英文名称',14, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','deptId','货位所属部门ID',15, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','deptPlaceKey','部门货位ID-(字典表-vmes_dictionary.id)',16, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','pathName','货位名称',17, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','pathId','根节点到本节点路径ID',18, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','isopen','是否公开 (0:不公开:企业内部维护 1:公开:超级管理员维护)',19, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','remark','备注',20, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','cuser','创建用户id',21, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','cdate','创建时间',22, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','uuser','修改用户id',23, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','udate','修改时间',24, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','isdisable','是否启用(0:已禁用 1:启用)',25, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','isSimple','isSimple',26, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','serialNumber','同级排列序号',27, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','isLeaf','是否叶子(0:非叶子 1:是叶子)',28, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','productId','货品id',29, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','productCode','货品编码',30, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','productName','货品名称',31, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','productSpec','规格型号',32, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','productUnit','计量单位',33, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','productUnitName','计量单位',34, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','productGenre','货品属性',35, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','productGenreName','货品属性',36, '1','1','1','0',now(), 'admin'),
        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','productType','productType',37, '1','1','1','0',now(), 'admin'),

        (replace(uuid(), '-', ''),'warehouseToWarehouseProductByProduct','stockCount','库存数量',38, '1','1','1','0',now(), 'admin'),

    </insert>
    <select id="findWarehouseToWarehouseProductByProduct" parameterType="com.yvan.PageData" resultType="java.util.Map">
        select
            warehouse.id id,
            warehouse.id warehouseId,
            warehouse.pid pid,
            warehouse.company_id companyId,
            warehouse.entity_type entityType,
            warehouse.virtual_genre virtualGenre,

            warehouse.virtual_dept_id virtualDeptId,
            warehouse.virtual_dept_name virtualDeptName,
            warehouse.virtual_customer_id virtualCustomerId,
            warehouse.virtual_customer_name virtualCustomerName,
            warehouse.layer layer,

            warehouse.qrcode qrcode,
            warehouse.code warehouseCode,
            warehouse.warehouse_id warehouseId,
            warehouse.name name,
            warehouse.name_en nameEn,

            warehouse.dept_id deptId,
            warehouse.dept_place_key deptPlaceKey,
            warehouse.path_name pathName,
            warehouse.path_id pathId,
            warehouse.isopen isopen,

            warehouse.remark remark,
            warehouse.cuser cuser,
            warehouse.cdate cdate,
            warehouse.uuser uuser,
            warehouse.udate udate,

            warehouse.isdisable isdisable,
            warehouse.is_simple isSimple,
            warehouse.serial_number serialNumber,
            warehouse.isLeaf,

            round(ifnull(wp.stock_count, 0), 2) stockCount,

            <!--货品表-->
            wp.product_id productId,
            product.code productCode,
            product.name productName,
            product.spec productSpec,
            produnit.unit productUnit,
            unit.name productUnitName,
            product.genre productGenre,
            genre.name productGenreName,
            product.type productType


        from vmes_warehouse warehouse
            left join (
                select
                    warehouse_id,
                    product_id,
                    sum(stock_count) stock_count
                from vmes_warehouse_product
                <where>
                    <if test="companyId != null and companyId != ''" >
                        and company_id = #{companyId}
                    </if>
                    <!--该查询中的条件: 结果集中获取全部库位信息: 仓库中含有指定货品的库位 + 空库位 -->
                    <if test="isNeedAll_productId != null and isNeedAll_productId != ''" >
                        and product_id = #{isNeedAll_productId}
                    </if>
                </where>
                group by warehouse_id,product_id
            ) wp on warehouse.id = wp.warehouse_id
            left join vmes_product product on wp.product_id = product.id
            left join vmes_product_unit produnit on wp.product_id = produnit.product_id and produnit.type = 1
            left join vmes_dictionary unit on produnit.unit = unit.id
            left join vmes_dictionary genre on product.genre = genre.id
        <where>
            <if test="warehouseIds != null and warehouseIds != ''" >
                and warehouse.id in (${warehouseIds})
            </if>
            <if test="notInWarehouseIds != null and notInWarehouseIds != ''" >
                and warehouse.id not in (${notInWarehouseIds})
            </if>
            <if test="companyId != null and companyId != ''" >
                and warehouse.company_id = #{companyId}
            </if>
            <if test="warehouseIsdisable != null and warehouseIsdisable != ''" >
                and warehouse.isdisable = #{warehouseIsdisable}
            </if>

            <!--nodeId 树形结构指定节点id 自定义sql查询语句-->
            <if test="nodeId != null and nodeId != ''" >
                and warehouse.path_id LIKE CONCAT(CONCAT('%', #{nodeId}),'%')
            </if>
            <!--nodeId 实体库,虚拟库 自定义sql查询语句 查询结果集需要(实体库,虚拟库)-->
            <if test="'true' == isNeedEntityVirtual">
                <!--实体库:2d75e49bcb9911e884ad00163e105f05 虚拟库:56f5e83dcb9911e884ad00163e105f05 仓库表:vmes_warehouse-->
                and (warehouse.path_id LIKE '%2d75e49bcb9911e884ad00163e105f05%' or warehouse.path_id LIKE '%56f5e83dcb9911e884ad00163e105f05%')
            </if>
            <!--nodeId 实体库 自定义sql查询语句 查询结果集需要(实体库)-->
            <if test="'true' == isNeedEntity">
                <!--实体库:2d75e49bcb9911e884ad00163e105f05 -->
                and warehouse.path_id LIKE '%2d75e49bcb9911e884ad00163e105f05%'
            </if>
            <!--nodeId 虚拟库 自定义sql查询语句 查询结果集需要(虚拟库)-->
            <if test="'true' == isNeedVirtual">
                <!--虚拟库:56f5e83dcb9911e884ad00163e105f05 仓库表:vmes_warehouse-->
                and warehouse.path_id LIKE '%56f5e83dcb9911e884ad00163e105f05%'
            </if>

            <!--备件库 自定义sql查询语句-->
            <if test="'true' == isNeedSpare">
                and warehouse.name = '备件库'
            </if>
            <if test="'true' == isNotNeedSpare">
                <![CDATA[ and warehouse.name <> '备件库' ]]>
            </if>

            <!--该查询中的条件: 结果集中获取库位信息:仓库中含有指定货品的库位 (空库位不在查结果集中)-->
            <if test="productId != null and productId != ''" >
                and wp.product_id = #{productId}
            </if>

            <if test="pathName != null and pathName != ''" >
                and warehouse.path_name = #{pathName}
            </if>

            <!--queryStr 自定义sql查询语句-->
            <if test="queryStr != null and queryStr != ''" >
                and ${queryStr}
            </if>
        </where>
        <if test="orderStr != null and orderStr != ''" >
            order by ${orderStr}
        </if>
    </select>

</mapper>